
EMG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008538  08008538  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008538  08008538  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008538  08008538  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  200001e0  08008720  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08008720  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b76c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042af  00000000  00000000  0003b975  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  00041130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019db3  00000000  00000000  00042410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001444b  00000000  00000000  0005c1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d07b  00000000  00000000  0007060e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c24  00000000  00000000  000ed704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080083dc 	.word	0x080083dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080083dc 	.word	0x080083dc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe3b 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f006 fadc 	bl	8006720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f006 faa8 	bl	80066bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_IncTick+0x1c>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	461a      	mov	r2, r3
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x20>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4413      	add	r3, r2
 8000188:	4a03      	ldr	r2, [pc, #12]	; (8000198 <HAL_IncTick+0x20>)
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	20000004 	.word	0x20000004
 8000198:	2000045c 	.word	0x2000045c

0800019c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  return uwTick;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <HAL_GetTick+0x10>)
 80001a2:	681b      	ldr	r3, [r3, #0]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	2000045c 	.word	0x2000045c

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff0 	bl	800019c <HAL_GetTick>
 80001bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80001c8:	d005      	beq.n	80001d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <HAL_Delay+0x40>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	4413      	add	r3, r2
 80001d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001d6:	bf00      	nop
 80001d8:	f7ff ffe0 	bl	800019c <HAL_GetTick>
 80001dc:	4602      	mov	r2, r0
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d8f7      	bhi.n	80001d8 <HAL_Delay+0x28>
  {
  }
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000004 	.word	0x20000004

080001f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80001fc:	2300      	movs	r3, #0
 80001fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000200:	2300      	movs	r3, #0
 8000202:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000204:	2300      	movs	r3, #0
 8000206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d101      	bne.n	8000216 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000212:	2301      	movs	r3, #1
 8000214:	e0be      	b.n	8000394 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000220:	2b00      	cmp	r3, #0
 8000222:	d109      	bne.n	8000238 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f006 f84a 	bl	80062cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 fc79 	bl	8000b30 <ADC_ConversionStop_Disable>
 800023e:	4603      	mov	r3, r0
 8000240:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000246:	f003 0310 	and.w	r3, r3, #16
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8099 	bne.w	8000382 <HAL_ADC_Init+0x18e>
 8000250:	7dfb      	ldrb	r3, [r7, #23]
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8095 	bne.w	8000382 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800025c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000260:	f023 0302 	bic.w	r3, r3, #2
 8000264:	f043 0202 	orr.w	r2, r3, #2
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000274:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	7b1b      	ldrb	r3, [r3, #12]
 800027a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800027c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	4313      	orrs	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800028c:	d003      	beq.n	8000296 <HAL_ADC_Init+0xa2>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d102      	bne.n	800029c <HAL_ADC_Init+0xa8>
 8000296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029a:	e000      	b.n	800029e <HAL_ADC_Init+0xaa>
 800029c:	2300      	movs	r3, #0
 800029e:	693a      	ldr	r2, [r7, #16]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	7d1b      	ldrb	r3, [r3, #20]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d119      	bne.n	80002e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	7b1b      	ldrb	r3, [r3, #12]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d109      	bne.n	80002c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	035a      	lsls	r2, r3, #13
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	4313      	orrs	r3, r2
 80002c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002c4:	613b      	str	r3, [r7, #16]
 80002c6:	e00b      	b.n	80002e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002cc:	f043 0220 	orr.w	r2, r3, #32
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002d8:	f043 0201 	orr.w	r2, r3, #1
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	693a      	ldr	r2, [r7, #16]
 80002f0:	430a      	orrs	r2, r1
 80002f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	689a      	ldr	r2, [r3, #8]
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <HAL_ADC_Init+0x1a8>)
 80002fc:	4013      	ands	r3, r2
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	68b9      	ldr	r1, [r7, #8]
 8000304:	430b      	orrs	r3, r1
 8000306:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000310:	d003      	beq.n	800031a <HAL_ADC_Init+0x126>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d104      	bne.n	8000324 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	3b01      	subs	r3, #1
 8000320:	051b      	lsls	r3, r3, #20
 8000322:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	430a      	orrs	r2, r1
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <HAL_ADC_Init+0x1ac>)
 8000340:	4013      	ands	r3, r2
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	429a      	cmp	r2, r3
 8000346:	d10b      	bne.n	8000360 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000352:	f023 0303 	bic.w	r3, r3, #3
 8000356:	f043 0201 	orr.w	r2, r3, #1
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800035e:	e018      	b.n	8000392 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000364:	f023 0312 	bic.w	r3, r3, #18
 8000368:	f043 0210 	orr.w	r2, r3, #16
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000374:	f043 0201 	orr.w	r2, r3, #1
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800037c:	2301      	movs	r3, #1
 800037e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000380:	e007      	b.n	8000392 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000386:	f043 0210 	orr.w	r2, r3, #16
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800038e:	2301      	movs	r3, #1
 8000390:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000392:	7dfb      	ldrb	r3, [r7, #23]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3718      	adds	r7, #24
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	ffe1f7fd 	.word	0xffe1f7fd
 80003a0:	ff1f0efe 	.word	0xff1f0efe

080003a4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d101      	bne.n	80003be <HAL_ADC_Start_IT+0x1a>
 80003ba:	2302      	movs	r3, #2
 80003bc:	e0a0      	b.n	8000500 <HAL_ADC_Start_IT+0x15c>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f000 fb60 	bl	8000a8c <ADC_Enable>
 80003cc:	4603      	mov	r3, r0
 80003ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f040 808f 	bne.w	80004f6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003e0:	f023 0301 	bic.w	r3, r3, #1
 80003e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a45      	ldr	r2, [pc, #276]	; (8000508 <HAL_ADC_Start_IT+0x164>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d105      	bne.n	8000402 <HAL_ADC_Start_IT+0x5e>
 80003f6:	4b45      	ldr	r3, [pc, #276]	; (800050c <HAL_ADC_Start_IT+0x168>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d115      	bne.n	800042e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000418:	2b00      	cmp	r3, #0
 800041a:	d026      	beq.n	800046a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800042c:	e01d      	b.n	800046a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a33      	ldr	r2, [pc, #204]	; (800050c <HAL_ADC_Start_IT+0x168>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d004      	beq.n	800044e <HAL_ADC_Start_IT+0xaa>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a2f      	ldr	r2, [pc, #188]	; (8000508 <HAL_ADC_Start_IT+0x164>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d10d      	bne.n	800046a <HAL_ADC_Start_IT+0xc6>
 800044e:	4b2f      	ldr	r3, [pc, #188]	; (800050c <HAL_ADC_Start_IT+0x168>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000456:	2b00      	cmp	r3, #0
 8000458:	d007      	beq.n	800046a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800045e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000462:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d006      	beq.n	8000484 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047a:	f023 0206 	bic.w	r2, r3, #6
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
 8000482:	e002      	b.n	800048a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2200      	movs	r2, #0
 8000488:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f06f 0202 	mvn.w	r2, #2
 800049a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f042 0220 	orr.w	r2, r2, #32
 80004aa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80004b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004ba:	d113      	bne.n	80004e4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004c0:	4a11      	ldr	r2, [pc, #68]	; (8000508 <HAL_ADC_Start_IT+0x164>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d105      	bne.n	80004d2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <HAL_ADC_Start_IT+0x168>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d108      	bne.n	80004e4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	e00c      	b.n	80004fe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	689a      	ldr	r2, [r3, #8]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	e003      	b.n	80004fe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40012800 	.word	0x40012800
 800050c:	40012400 	.word	0x40012400

08000510 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800051c:	2300      	movs	r3, #0
 800051e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a64      	ldr	r2, [pc, #400]	; (80006b8 <HAL_ADC_Start_DMA+0x1a8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d004      	beq.n	8000534 <HAL_ADC_Start_DMA+0x24>
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a63      	ldr	r2, [pc, #396]	; (80006bc <HAL_ADC_Start_DMA+0x1ac>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <HAL_ADC_Start_DMA+0x32>
 8000534:	4b60      	ldr	r3, [pc, #384]	; (80006b8 <HAL_ADC_Start_DMA+0x1a8>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 80b3 	bne.w	80006a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000548:	2b01      	cmp	r3, #1
 800054a:	d101      	bne.n	8000550 <HAL_ADC_Start_DMA+0x40>
 800054c:	2302      	movs	r3, #2
 800054e:	e0ae      	b.n	80006ae <HAL_ADC_Start_DMA+0x19e>
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2201      	movs	r2, #1
 8000554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000558:	68f8      	ldr	r0, [r7, #12]
 800055a:	f000 fa97 	bl	8000a8c <ADC_Enable>
 800055e:	4603      	mov	r3, r0
 8000560:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	2b00      	cmp	r3, #0
 8000566:	f040 809a 	bne.w	800069e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a4e      	ldr	r2, [pc, #312]	; (80006bc <HAL_ADC_Start_DMA+0x1ac>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d105      	bne.n	8000594 <HAL_ADC_Start_DMA+0x84>
 8000588:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <HAL_ADC_Start_DMA+0x1a8>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d115      	bne.n	80005c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000598:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d026      	beq.n	80005fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005be:	e01d      	b.n	80005fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a39      	ldr	r2, [pc, #228]	; (80006b8 <HAL_ADC_Start_DMA+0x1a8>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d004      	beq.n	80005e0 <HAL_ADC_Start_DMA+0xd0>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a38      	ldr	r2, [pc, #224]	; (80006bc <HAL_ADC_Start_DMA+0x1ac>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d10d      	bne.n	80005fc <HAL_ADC_Start_DMA+0xec>
 80005e0:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <HAL_ADC_Start_DMA+0x1a8>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d007      	beq.n	80005fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060c:	f023 0206 	bic.w	r2, r3, #6
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
 8000614:	e002      	b.n	800061c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <HAL_ADC_Start_DMA+0x1b0>)
 800062a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <HAL_ADC_Start_DMA+0x1b4>)
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <HAL_ADC_Start_DMA+0x1b8>)
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f06f 0202 	mvn.w	r2, #2
 8000644:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000654:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6a18      	ldr	r0, [r3, #32]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	334c      	adds	r3, #76	; 0x4c
 8000660:	4619      	mov	r1, r3
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f000 fc47 	bl	8000ef8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000674:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000678:	d108      	bne.n	800068c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000688:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800068a:	e00f      	b.n	80006ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800069a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800069c:	e006      	b.n	80006ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80006a6:	e001      	b.n	80006ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40012400 	.word	0x40012400
 80006bc:	40012800 	.word	0x40012800
 80006c0:	08000ba5 	.word	0x08000ba5
 80006c4:	08000c21 	.word	0x08000c21
 80006c8:	08000c3d 	.word	0x08000c3d

080006cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	2b20      	cmp	r3, #32
 80006e0:	d140      	bne.n	8000764 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d139      	bne.n	8000764 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d105      	bne.n	8000708 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000700:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000712:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000716:	d11d      	bne.n	8000754 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071c:	2b00      	cmp	r3, #0
 800071e:	d119      	bne.n	8000754 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f022 0220 	bic.w	r2, r2, #32
 800072e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d105      	bne.n	8000754 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074c:	f043 0201 	orr.w	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f87c 	bl	8000852 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f06f 0212 	mvn.w	r2, #18
 8000762:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	2b80      	cmp	r3, #128	; 0x80
 8000770:	d14f      	bne.n	8000812 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d148      	bne.n	8000812 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000784:	f003 0310 	and.w	r3, r3, #16
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000790:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80007a2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80007a6:	d012      	beq.n	80007ce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d125      	bne.n	8000802 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80007c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80007c4:	d11d      	bne.n	8000802 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d119      	bne.n	8000802 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007dc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d105      	bne.n	8000802 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fa:	f043 0201 	orr.w	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 fa34 	bl	8000c70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f06f 020c 	mvn.w	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081c:	2b40      	cmp	r3, #64	; 0x40
 800081e:	d114      	bne.n	800084a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b01      	cmp	r3, #1
 800082c:	d10d      	bne.n	800084a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 f81b 	bl	8000876 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f06f 0201 	mvn.w	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
	...

0800089c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d101      	bne.n	80008bc <HAL_ADC_ConfigChannel+0x20>
 80008b8:	2302      	movs	r3, #2
 80008ba:	e0dc      	b.n	8000a76 <HAL_ADC_ConfigChannel+0x1da>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b06      	cmp	r3, #6
 80008ca:	d81c      	bhi.n	8000906 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	3b05      	subs	r3, #5
 80008de:	221f      	movs	r2, #31
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	4019      	ands	r1, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	3b05      	subs	r3, #5
 80008f8:	fa00 f203 	lsl.w	r2, r0, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
 8000904:	e03c      	b.n	8000980 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b0c      	cmp	r3, #12
 800090c:	d81c      	bhi.n	8000948 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	3b23      	subs	r3, #35	; 0x23
 8000920:	221f      	movs	r2, #31
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	4019      	ands	r1, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	3b23      	subs	r3, #35	; 0x23
 800093a:	fa00 f203 	lsl.w	r2, r0, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	430a      	orrs	r2, r1
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
 8000946:	e01b      	b.n	8000980 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	3b41      	subs	r3, #65	; 0x41
 800095a:	221f      	movs	r2, #31
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	4019      	ands	r1, r3
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	4613      	mov	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	3b41      	subs	r3, #65	; 0x41
 8000974:	fa00 f203 	lsl.w	r2, r0, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	430a      	orrs	r2, r1
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b09      	cmp	r3, #9
 8000986:	d91c      	bls.n	80009c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	68d9      	ldr	r1, [r3, #12]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	3b1e      	subs	r3, #30
 800099a:	2207      	movs	r2, #7
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4019      	ands	r1, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	3b1e      	subs	r3, #30
 80009b4:	fa00 f203 	lsl.w	r2, r0, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	e019      	b.n	80009f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	6919      	ldr	r1, [r3, #16]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	2207      	movs	r2, #7
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	4019      	ands	r1, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	6898      	ldr	r0, [r3, #8]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	fa00 f203 	lsl.w	r2, r0, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b10      	cmp	r3, #16
 80009fc:	d003      	beq.n	8000a06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a02:	2b11      	cmp	r3, #17
 8000a04:	d132      	bne.n	8000a6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_ADC_ConfigChannel+0x1e4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d125      	bne.n	8000a5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d126      	bne.n	8000a6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a2c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b10      	cmp	r3, #16
 8000a34:	d11a      	bne.n	8000a6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_ADC_ConfigChannel+0x1e8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <HAL_ADC_ConfigChannel+0x1ec>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	0c9a      	lsrs	r2, r3, #18
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a4c:	e002      	b.n	8000a54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f9      	bne.n	8000a4e <HAL_ADC_ConfigChannel+0x1b2>
 8000a5a:	e007      	b.n	8000a6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	f043 0220 	orr.w	r2, r3, #32
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40012400 	.word	0x40012400
 8000a84:	20000118 	.word	0x20000118
 8000a88:	431bde83 	.word	0x431bde83

08000a8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d039      	beq.n	8000b1e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 0201 	orr.w	r2, r2, #1
 8000ab8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <ADC_Enable+0x9c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <ADC_Enable+0xa0>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ac8:	e002      	b.n	8000ad0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f9      	bne.n	8000aca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ad6:	f7ff fb61 	bl	800019c <HAL_GetTick>
 8000ada:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000adc:	e018      	b.n	8000b10 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ade:	f7ff fb5d 	bl	800019c <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d911      	bls.n	8000b10 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	f043 0210 	orr.w	r2, r3, #16
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afc:	f043 0201 	orr.w	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e007      	b.n	8000b20 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d1df      	bne.n	8000ade <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000118 	.word	0x20000118
 8000b2c:	431bde83 	.word	0x431bde83

08000b30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d127      	bne.n	8000b9a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0201 	bic.w	r2, r2, #1
 8000b58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b5a:	f7ff fb1f 	bl	800019c <HAL_GetTick>
 8000b5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b60:	e014      	b.n	8000b8c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b62:	f7ff fb1b 	bl	800019c <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d90d      	bls.n	8000b8c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	f043 0210 	orr.w	r2, r3, #16
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	f043 0201 	orr.w	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e007      	b.n	8000b9c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d0e3      	beq.n	8000b62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d127      	bne.n	8000c0e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bd8:	d115      	bne.n	8000c06 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d111      	bne.n	8000c06 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f043 0201 	orr.w	r2, r3, #1
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fe23 	bl	8000852 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000c0c:	e004      	b.n	8000c18 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6a1b      	ldr	r3, [r3, #32]
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	4798      	blx	r3
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fe18 	bl	8000864 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	f043 0204 	orr.w	r2, r3, #4
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff fe10 	bl	8000888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <__NVIC_EnableIRQ+0x34>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff4f 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff64 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ffb2 	bl	8000d74 <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff81 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff57 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e043      	b.n	8000ee2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_DMA_Init+0xa8>)
 8000e62:	4413      	add	r3, r2
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <HAL_DMA_Init+0xac>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	009a      	lsls	r2, r3, #2
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <HAL_DMA_Init+0xb0>)
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Start_IT+0x20>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e04a      	b.n	8000fae <HAL_DMA_Start_IT+0xb6>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d13a      	bne.n	8000fa0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f938 	bl	80011c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 020e 	orr.w	r2, r2, #14
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e00f      	b.n	8000f8e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0204 	bic.w	r2, r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 020a 	orr.w	r2, r2, #10
 8000f8c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0201 	orr.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e005      	b.n	8000fac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04f      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0204 	bic.w	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d029      	beq.n	8001066 <HAL_DMA_IRQHandler+0xae>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0xaa>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01a      	beq.n	800105c <HAL_DMA_IRQHandler+0xa4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_DMA_IRQHandler+0x92>
 8001044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800104a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001054:	e008      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105a:	e005      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	e002      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	e000      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001066:	2304      	movs	r3, #4
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 800106a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8094 	beq.w	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e08e      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d056      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d051      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020a 	bic.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d029      	beq.n	800111e <HAL_DMA_IRQHandler+0x166>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_IRQHandler+0x162>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x15c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d012      	beq.n	800110e <HAL_DMA_IRQHandler+0x156>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x150>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d102      	bne.n	8001102 <HAL_DMA_IRQHandler+0x14a>
 80010fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001100:	e00e      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	e00b      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	e008      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	e005      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	e002      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111a:	2320      	movs	r3, #32
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111e:	2302      	movs	r3, #2
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 8001122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800113c:	e02f      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return;
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020008 	.word	0x40020008
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40020030 	.word	0x40020030
 80011b4:	40020044 	.word	0x40020044
 80011b8:	40020058 	.word	0x40020058
 80011bc:	4002006c 	.word	0x4002006c
 80011c0:	40020000 	.word	0x40020000

080011c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d108      	bne.n	8001204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001202:	e007      	b.n	8001214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e127      	b.n	8001484 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8116 	bne.w	800147e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b12      	cmp	r3, #18
 8001258:	d034      	beq.n	80012c4 <HAL_GPIO_Init+0xa4>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d80d      	bhi.n	800127a <HAL_GPIO_Init+0x5a>
 800125e:	2b02      	cmp	r3, #2
 8001260:	d02b      	beq.n	80012ba <HAL_GPIO_Init+0x9a>
 8001262:	2b02      	cmp	r3, #2
 8001264:	d804      	bhi.n	8001270 <HAL_GPIO_Init+0x50>
 8001266:	2b00      	cmp	r3, #0
 8001268:	d031      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d01c      	beq.n	80012a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126e:	e048      	b.n	8001302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001270:	2b03      	cmp	r3, #3
 8001272:	d043      	beq.n	80012fc <HAL_GPIO_Init+0xdc>
 8001274:	2b11      	cmp	r3, #17
 8001276:	d01b      	beq.n	80012b0 <HAL_GPIO_Init+0x90>
          break;
 8001278:	e043      	b.n	8001302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800127a:	4a89      	ldr	r2, [pc, #548]	; (80014a0 <HAL_GPIO_Init+0x280>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d026      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 8001280:	4a87      	ldr	r2, [pc, #540]	; (80014a0 <HAL_GPIO_Init+0x280>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d806      	bhi.n	8001294 <HAL_GPIO_Init+0x74>
 8001286:	4a87      	ldr	r2, [pc, #540]	; (80014a4 <HAL_GPIO_Init+0x284>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d020      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 800128c:	4a86      	ldr	r2, [pc, #536]	; (80014a8 <HAL_GPIO_Init+0x288>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01d      	beq.n	80012ce <HAL_GPIO_Init+0xae>
          break;
 8001292:	e036      	b.n	8001302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001294:	4a85      	ldr	r2, [pc, #532]	; (80014ac <HAL_GPIO_Init+0x28c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 800129a:	4a85      	ldr	r2, [pc, #532]	; (80014b0 <HAL_GPIO_Init+0x290>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d016      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 80012a0:	4a84      	ldr	r2, [pc, #528]	; (80014b4 <HAL_GPIO_Init+0x294>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xae>
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e028      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e023      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01e      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e019      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e012      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e008      	b.n	8001302 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d801      	bhi.n	800130c <HAL_GPIO_Init+0xec>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	e001      	b.n	8001310 <HAL_GPIO_Init+0xf0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3304      	adds	r3, #4
 8001310:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2bff      	cmp	r3, #255	; 0xff
 8001316:	d802      	bhi.n	800131e <HAL_GPIO_Init+0xfe>
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x104>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	3b08      	subs	r3, #8
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	210f      	movs	r1, #15
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	401a      	ands	r2, r3
 8001336:	6a39      	ldr	r1, [r7, #32]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	431a      	orrs	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8096 	beq.w	800147e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_GPIO_Init+0x298>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_GPIO_Init+0x298>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_GPIO_Init+0x298>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136a:	4a54      	ldr	r2, [pc, #336]	; (80014bc <HAL_GPIO_Init+0x29c>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x19e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x19a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x196>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x192>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013be:	2300      	movs	r3, #0
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d0:	493a      	ldr	r1, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x29c>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4938      	ldr	r1, [pc, #224]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4933      	ldr	r1, [pc, #204]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	492e      	ldr	r1, [pc, #184]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4929      	ldr	r1, [pc, #164]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800142a:	4013      	ands	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	43db      	mvns	r3, r3
 8001450:	491f      	ldr	r1, [pc, #124]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001452:	4013      	ands	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	491a      	ldr	r1, [pc, #104]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	60cb      	str	r3, [r1, #12]
 800146e:	e006      	b.n	800147e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	43db      	mvns	r3, r3
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800147a:	4013      	ands	r3, r2
 800147c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f47f aed0 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001494:	bf00      	nop
 8001496:	372c      	adds	r7, #44	; 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	10210000 	.word	0x10210000
 80014a4:	10110000 	.word	0x10110000
 80014a8:	10120000 	.word	0x10120000
 80014ac:	10310000 	.word	0x10310000
 80014b0:	10320000 	.word	0x10320000
 80014b4:	10220000 	.word	0x10220000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151c:	887a      	ldrh	r2, [r7, #2]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001522:	e002      	b.n	800152a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af06      	add	r7, sp, #24
 800153a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0d3      	b.n	80016ee <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f005 fc02 	bl	8006d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 f976 	bl	800385e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	687e      	ldr	r6, [r7, #4]
 800157a:	466d      	mov	r5, sp
 800157c:	f106 0410 	add.w	r4, r6, #16
 8001580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	602b      	str	r3, [r5, #0]
 8001588:	1d33      	adds	r3, r6, #4
 800158a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f002 f93f 	bl	8003810 <USB_CoreInit>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0a4      	b.n	80016ee <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f973 	bl	8003896 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e035      	b.n	8001622 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	4413      	add	r3, r2
 80015be:	3329      	adds	r3, #41	; 0x29
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4413      	add	r3, r2
 80015cc:	3328      	adds	r3, #40	; 0x28
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	b291      	uxth	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	4413      	add	r3, r2
 80015de:	3336      	adds	r3, #54	; 0x36
 80015e0:	460a      	mov	r2, r1
 80015e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	4413      	add	r3, r2
 80015ec:	332b      	adds	r3, #43	; 0x2b
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4413      	add	r3, r2
 80015fa:	3338      	adds	r3, #56	; 0x38
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	4413      	add	r3, r2
 8001608:	333c      	adds	r3, #60	; 0x3c
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	3302      	adds	r3, #2
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	4413      	add	r3, r2
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	3301      	adds	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3c4      	bcc.n	80015b6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e031      	b.n	8001696 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	015b      	lsls	r3, r3, #5
 8001638:	4413      	add	r3, r2
 800163a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	015b      	lsls	r3, r3, #5
 8001648:	4413      	add	r3, r2
 800164a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	015b      	lsls	r3, r3, #5
 8001658:	4413      	add	r3, r2
 800165a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	4413      	add	r3, r2
 800166a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	4413      	add	r3, r2
 800167a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	330a      	adds	r3, #10
 8001688:	015b      	lsls	r3, r3, #5
 800168a:	4413      	add	r3, r2
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3c8      	bcc.n	8001632 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	687e      	ldr	r6, [r7, #4]
 80016a8:	466d      	mov	r5, sp
 80016aa:	f106 0410 	add.w	r4, r6, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	1d33      	adds	r3, r6, #4
 80016b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f002 f8f7 	bl	80038ae <USB_DevInit>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00d      	b.n	80016ee <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 f935 	bl	8004956 <USB_DevDisconnect>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_PCD_Start+0x16>
 8001708:	2302      	movs	r3, #2
 800170a:	e016      	b.n	800173a <HAL_PCD_Start+0x44>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001714:	2101      	movs	r1, #1
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f005 fd8b 	bl	8007232 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f90e 	bl	8004942 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f002 f880 	bl	8003830 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f90b 	bl	800496a <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175e:	d102      	bne.n	8001766 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 faf3 	bl	8001d4c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f8fd 	bl	800496a <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177a:	d112      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178e:	b292      	uxth	r2, r2
 8001790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f005 fb5a 	bl	8006e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800179a:	2100      	movs	r1, #0
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8de 	bl	800195e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f8df 	bl	800496a <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b6:	d10b      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ca:	b292      	uxth	r2, r2
 80017cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 f8c8 	bl	800496a <USB_ReadInterrupts>
 80017da:	4603      	mov	r3, r0
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e4:	d10b      	bne.n	80017fe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f8b1 	bl	800496a <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	d126      	bne.n	8001862 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0204 	bic.w	r2, r2, #4
 8001826:	b292      	uxth	r2, r2
 8001828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0208 	bic.w	r2, r2, #8
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f005 fb3b 	bl	8006ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800185c:	b292      	uxth	r2, r2
 800185e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 f87f 	bl	800496a <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001876:	d13d      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	b292      	uxth	r2, r2
 800188c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0204 	orr.w	r2, r2, #4
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 f850 	bl	800496a <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d4:	d10b      	bne.n	80018ee <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f005 facc 	bl	8006e8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f836 	bl	800496a <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001908:	d10e      	bne.n	8001928 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800191c:	b292      	uxth	r2, r2
 800191e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f005 fa85 	bl	8006e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f003 f81c 	bl	800496a <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193c:	d10b      	bne.n	8001956 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001950:	b292      	uxth	r2, r2
 8001952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_PCD_SetAddress+0x1a>
 8001974:	2302      	movs	r3, #2
 8001976:	e013      	b.n	80019a0 <HAL_PCD_SetAddress+0x42>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f002 ffc3 	bl	800491c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	70fb      	strb	r3, [r7, #3]
 80019ba:	460b      	mov	r3, r1
 80019bc:	803b      	strh	r3, [r7, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da0b      	bge.n	80019e6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	015b      	lsls	r3, r3, #5
 80019d6:	3328      	adds	r3, #40	; 0x28
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	705a      	strb	r2, [r3, #1]
 80019e4:	e00b      	b.n	80019fe <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	015b      	lsls	r3, r3, #5
 80019ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a0a:	883a      	ldrh	r2, [r7, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	78ba      	ldrb	r2, [r7, #2]
 8001a14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a28:	78bb      	ldrb	r3, [r7, #2]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d102      	bne.n	8001a34 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_PCD_EP_Open+0x9a>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e00e      	b.n	8001a60 <HAL_PCD_EP_Open+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 ff51 	bl	80038f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da0b      	bge.n	8001a94 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	3328      	adds	r3, #40	; 0x28
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	705a      	strb	r2, [r3, #1]
 8001a92:	e00b      	b.n	8001aac <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_PCD_EP_Close+0x5e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e00e      	b.n	8001ae4 <HAL_PCD_EP_Close+0x7c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 f9fd 	bl	8003ed4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	460b      	mov	r3, r1
 8001afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2200      	movs	r2, #0
 8001b24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6979      	ldr	r1, [r7, #20]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fb5c 	bl	8004200 <USB_EPStartXfer>
 8001b48:	e005      	b.n	8001b56 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fb55 	bl	8004200 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	330a      	adds	r3, #10
 8001b76:	015b      	lsls	r3, r3, #5
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	460b      	mov	r3, r1
 8001b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	015b      	lsls	r3, r3, #5
 8001ba0:	3328      	adds	r3, #40	; 0x28
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6979      	ldr	r1, [r7, #20]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fb0f 	bl	8004200 <USB_EPStartXfer>
 8001be2:	e005      	b.n	8001bf0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fb08 	bl	8004200 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 0207 	and.w	r2, r3, #7
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d901      	bls.n	8001c18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e046      	b.n	8001ca6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	da0b      	bge.n	8001c38 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	015b      	lsls	r3, r3, #5
 8001c28:	3328      	adds	r3, #40	; 0x28
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	705a      	strb	r2, [r3, #1]
 8001c36:	e009      	b.n	8001c4c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_PCD_EP_SetStall+0x72>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e01c      	b.n	8001ca6 <HAL_PCD_EP_SetStall+0xac>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fd78 	bl	8004770 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f002 fe76 	bl	8004988 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d901      	bls.n	8001ccc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e03a      	b.n	8001d42 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da0b      	bge.n	8001cec <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	3328      	adds	r3, #40	; 0x28
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
 8001cea:	e00b      	b.n	8001d04 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	015b      	lsls	r3, r3, #5
 8001cf4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_ClrStall+0x76>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e00e      	b.n	8001d42 <HAL_PCD_EP_ClrStall+0x94>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fd5e 	bl	80047f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d54:	e282      	b.n	800225c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d60:	8afb      	ldrh	r3, [r7, #22]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001d6a:	7d7b      	ldrb	r3, [r7, #21]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 8142 	bne.w	8001ff6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d72:	8afb      	ldrh	r3, [r7, #22]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d151      	bne.n	8001e20 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8c:	b29c      	uxth	r4, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3328      	adds	r3, #40	; 0x28
 8001da2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	3302      	adds	r3, #2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	441a      	add	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f005 f80f 	bl	8006e04 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8234 	beq.w	800225c <PCD_EP_ISR_Handler+0x510>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 822f 	bne.w	800225c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e1e:	e21d      	b.n	800225c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e26:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e30:	8a7b      	ldrh	r3, [r7, #18]
 8001e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d033      	beq.n	8001ea2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3306      	adds	r3, #6
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f002 fdd4 	bl	8004a26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	b29c      	uxth	r4, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e96:	b292      	uxth	r2, r2
 8001e98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f004 ff88 	bl	8006db0 <HAL_PCD_SetupStageCallback>
 8001ea0:	e1dc      	b.n	800225c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ea2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f280 81d8 	bge.w	800225c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29c      	uxth	r4, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	3306      	adds	r3, #6
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <PCD_EP_ISR_Handler+0x1e4>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6959      	ldr	r1, [r3, #20]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f002 fd86 	bl	8004a26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	441a      	add	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f004 ff52 	bl	8006dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461c      	mov	r4, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	441c      	add	r4, r3
 8001f42:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001f46:	461c      	mov	r4, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10e      	bne.n	8001f6e <PCD_EP_ISR_Handler+0x222>
 8001f50:	8823      	ldrh	r3, [r4, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	8023      	strh	r3, [r4, #0]
 8001f5c:	8823      	ldrh	r3, [r4, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	8023      	strh	r3, [r4, #0]
 8001f6c:	e02d      	b.n	8001fca <PCD_EP_ISR_Handler+0x27e>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b3e      	cmp	r3, #62	; 0x3e
 8001f74:	d812      	bhi.n	8001f9c <PCD_EP_ISR_Handler+0x250>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x244>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8023      	strh	r3, [r4, #0]
 8001f9a:	e016      	b.n	8001fca <PCD_EP_ISR_Handler+0x27e>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <PCD_EP_ISR_Handler+0x26a>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fda:	b29c      	uxth	r4, r3
 8001fdc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001fe0:	b29c      	uxth	r4, r3
 8001fe2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001fe6:	b29c      	uxth	r4, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4ba2      	ldr	r3, [pc, #648]	; (8002278 <PCD_EP_ISR_Handler+0x52c>)
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	8013      	strh	r3, [r2, #0]
 8001ff4:	e132      	b.n	800225c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	7d7b      	ldrb	r3, [r7, #21]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f280 80d1 	bge.w	80021b2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	7d7b      	ldrb	r3, [r7, #21]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002024:	4013      	ands	r3, r2
 8002026:	b29c      	uxth	r4, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	7d7b      	ldrb	r3, [r7, #21]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002038:	b292      	uxth	r2, r2
 800203a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800203c:	7d7b      	ldrb	r3, [r7, #21]
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	7b1b      	ldrb	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d121      	bne.n	8002096 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	3306      	adds	r3, #6
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d072      	beq.n	8002168 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6959      	ldr	r1, [r3, #20]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	88da      	ldrh	r2, [r3, #6]
 800208e:	8bfb      	ldrh	r3, [r7, #30]
 8002090:	f002 fcc9 	bl	8004a26 <USB_ReadPMA>
 8002094:	e068      	b.n	8002168 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d021      	beq.n	80020f4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	3302      	adds	r3, #2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020da:	8bfb      	ldrh	r3, [r7, #30]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02a      	beq.n	8002136 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	891a      	ldrh	r2, [r3, #8]
 80020ec:	8bfb      	ldrh	r3, [r7, #30]
 80020ee:	f002 fc9a 	bl	8004a26 <USB_ReadPMA>
 80020f2:	e020      	b.n	8002136 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	3306      	adds	r3, #6
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800211e:	8bfb      	ldrh	r3, [r7, #30]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6959      	ldr	r1, [r3, #20]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	895a      	ldrh	r2, [r3, #10]
 8002130:	8bfb      	ldrh	r3, [r7, #30]
 8002132:	f002 fc78 	bl	8004a26 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002150:	b29c      	uxth	r4, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	441a      	add	r2, r3
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <PCD_EP_ISR_Handler+0x530>)
 8002162:	4323      	orrs	r3, r4
 8002164:	b29b      	uxth	r3, r3
 8002166:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	8bfb      	ldrh	r3, [r7, #30]
 800216e:	441a      	add	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	8bfb      	ldrh	r3, [r7, #30]
 800217a:	441a      	add	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <PCD_EP_ISR_Handler+0x446>
 8002188:	8bfa      	ldrh	r2, [r7, #30]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	429a      	cmp	r2, r3
 8002190:	d206      	bcs.n	80021a0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f004 fe1b 	bl	8006dd4 <HAL_PCD_DataOutStageCallback>
 800219e:	e008      	b.n	80021b2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	7819      	ldrb	r1, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fc9d 	bl	8001aec <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021b2:	8a7b      	ldrh	r3, [r7, #18]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d04f      	beq.n	800225c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80021bc:	7d7b      	ldrb	r3, [r7, #21]
 80021be:	015b      	lsls	r3, r3, #5
 80021c0:	3328      	adds	r3, #40	; 0x28
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	7d7b      	ldrb	r3, [r7, #21]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	b29c      	uxth	r4, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	7d7b      	ldrb	r3, [r7, #21]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80021f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	3302      	adds	r3, #2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	441a      	add	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f004 fdde 	bl	8006e04 <HAL_PCD_DataInStageCallback>
 8002248:	e008      	b.n	800225c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	7819      	ldrb	r1, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fc96 	bl	8001b88 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002264:	b29b      	uxth	r3, r3
 8002266:	b21b      	sxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f6ff ad74 	blt.w	8001d56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3724      	adds	r7, #36	; 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	ffff8080 	.word	0xffff8080
 800227c:	ffff80c0 	.word	0xffff80c0

08002280 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	4613      	mov	r3, r2
 8002290:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002292:	897b      	ldrh	r3, [r7, #10]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	015b      	lsls	r3, r3, #5
 80022a6:	3328      	adds	r3, #40	; 0x28
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e006      	b.n	80022be <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b0:	897b      	ldrh	r3, [r7, #10]
 80022b2:	015b      	lsls	r3, r3, #5
 80022b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022be:	893b      	ldrh	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2200      	movs	r2, #0
 80022c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	80da      	strh	r2, [r3, #6]
 80022d2:	e00b      	b.n	80022ec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2201      	movs	r2, #1
 80022d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e26c      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8087 	beq.w	8002426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002318:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b04      	cmp	r3, #4
 8002322:	d00c      	beq.n	800233e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002324:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d112      	bne.n	8002356 <HAL_RCC_OscConfig+0x5e>
 8002330:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d10b      	bne.n	8002356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	4b89      	ldr	r3, [pc, #548]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d06c      	beq.n	8002424 <HAL_RCC_OscConfig+0x12c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d168      	bne.n	8002424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e246      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x76>
 8002360:	4b80      	ldr	r3, [pc, #512]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7f      	ldr	r2, [pc, #508]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e02e      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b78      	ldr	r3, [pc, #480]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a77      	ldr	r2, [pc, #476]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0xbc>
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a71      	ldr	r2, [pc, #452]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0xd4>
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6a      	ldr	r2, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a67      	ldr	r2, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fd fee2 	bl	800019c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fd fede 	bl	800019c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1fa      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0xe4>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fd fece 	bl	800019c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fd feca 	bl	800019c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1e6      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x10c>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d063      	beq.n	80024fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800243e:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b08      	cmp	r3, #8
 8002448:	d11c      	bne.n	8002484 <HAL_RCC_OscConfig+0x18c>
 800244a:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x176>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1ba      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4939      	ldr	r1, [pc, #228]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	e03a      	b.n	80024fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCC_OscConfig+0x270>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fd fe83 	bl	800019c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7fd fe7f 	bl	800019c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e19b      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4927      	ldr	r1, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCC_OscConfig+0x270>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fd fe62 	bl	800019c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024dc:	f7fd fe5e 	bl	800019c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e17a      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03a      	beq.n	800257c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d019      	beq.n	8002542 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x274>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7fd fe42 	bl	800019c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7fd fe3e 	bl	800019c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e15a      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x26c>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800253a:	2001      	movs	r0, #1
 800253c:	f000 fb0a 	bl	8002b54 <RCC_Delay>
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_RCC_OscConfig+0x274>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7fd fe28 	bl	800019c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254e:	e00f      	b.n	8002570 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002550:	f7fd fe24 	bl	800019c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d908      	bls.n	8002570 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e140      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	42420000 	.word	0x42420000
 800256c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b9e      	ldr	r3, [pc, #632]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e9      	bne.n	8002550 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a6 	beq.w	80026d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b97      	ldr	r3, [pc, #604]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b94      	ldr	r3, [pc, #592]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a93      	ldr	r2, [pc, #588]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	61d3      	str	r3, [r2, #28]
 80025a6:	4b91      	ldr	r3, [pc, #580]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b8e      	ldr	r3, [pc, #568]	; (80027f0 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d118      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c2:	4b8b      	ldr	r3, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a8a      	ldr	r2, [pc, #552]	; (80027f0 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ce:	f7fd fde5 	bl	800019c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7fd fde1 	bl	800019c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0fd      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x312>
 80025fc:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a7a      	ldr	r2, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	e02d      	b.n	8002666 <HAL_RCC_OscConfig+0x36e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x334>
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a75      	ldr	r2, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a72      	ldr	r2, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	e01c      	b.n	8002666 <HAL_RCC_OscConfig+0x36e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x356>
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a6c      	ldr	r2, [pc, #432]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a69      	ldr	r2, [pc, #420]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x36e>
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a66      	ldr	r2, [pc, #408]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b64      	ldr	r3, [pc, #400]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a63      	ldr	r2, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7fd fd95 	bl	800019c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fd fd91 	bl	800019c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0ab      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	4b57      	ldr	r3, [pc, #348]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ee      	beq.n	8002676 <HAL_RCC_OscConfig+0x37e>
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fd fd7f 	bl	800019c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fd fd7b 	bl	800019c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e095      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ee      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ca:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a47      	ldr	r2, [pc, #284]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8081 	beq.w	80027e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d061      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d146      	bne.n	8002782 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_RCC_OscConfig+0x4fc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fd fd4f 	bl	800019c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fd fd4b 	bl	800019c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e067      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d108      	bne.n	800273c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	492d      	ldr	r1, [pc, #180]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a19      	ldr	r1, [r3, #32]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	430b      	orrs	r3, r1
 800274e:	4927      	ldr	r1, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_OscConfig+0x4fc>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fd fd1f 	bl	800019c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7fd fd1b 	bl	800019c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e037      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x46a>
 8002780:	e02f      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_RCC_OscConfig+0x4fc>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fd fd08 	bl	800019c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7fd fd04 	bl	800019c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e020      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x498>
 80027ae:	e018      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_OscConfig+0x4f4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	42420060 	.word	0x42420060

080027f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0207 	bic.w	r2, r3, #7
 8002822:	4965      	ldr	r1, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800285e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d040      	beq.n	8002918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e073      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e8:	f7fd fc58 	bl	800019c <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fd fc54 	bl	800019c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e053      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d210      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	fa21 f303 	lsr.w	r3, r1, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1cc>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 feba 	bl	8006720 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08008488 	.word	0x08008488
 80029c4:	20000118 	.word	0x20000118
 80029c8:	20000000 	.word	0x20000000

080029cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b490      	push	{r4, r7}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029d4:	1d3c      	adds	r4, r7, #4
 80029d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x46>
 8002a0a:	e02d      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a0e:	623b      	str	r3, [r7, #32]
      break;
 8002a10:	e02d      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1e:	4413      	add	r3, r2
 8002a20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	0c5b      	lsrs	r3, r3, #17
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a3e:	4413      	add	r3, r2
 8002a40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4a:	fb02 f203 	mul.w	r2, r2, r3
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	e004      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	623b      	str	r3, [r7, #32]
      break;
 8002a66:	e002      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a6a:	623b      	str	r3, [r7, #32]
      break;
 8002a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc90      	pop	{r4, r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	080083f4 	.word	0x080083f4
 8002a80:	08008404 	.word	0x08008404
 8002a84:	40021000 	.word	0x40021000
 8002a88:	007a1200 	.word	0x007a1200
 8002a8c:	003d0900 	.word	0x003d0900

08002a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a94:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	20000118 	.word	0x20000118

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa8:	f7ff fff2 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4a03      	ldr	r2, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08008498 	.word	0x08008498

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	0adb      	lsrs	r3, r3, #11
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08008498 	.word	0x08008498

08002af4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	220f      	movs	r2, #15
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_GetClockConfig+0x58>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0203 	and.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_RCC_GetClockConfig+0x58>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_GetClockConfig+0x58>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_RCC_GetClockConfig+0x58>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetClockConfig+0x5c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0207 	and.w	r2, r3, #7
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40022000 	.word	0x40022000

08002b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <RCC_Delay+0x34>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <RCC_Delay+0x38>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0a5b      	lsrs	r3, r3, #9
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b70:	bf00      	nop
  }
  while (Delay --);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e5a      	subs	r2, r3, #1
 8002b76:	60fa      	str	r2, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f9      	bne.n	8002b70 <RCC_Delay+0x1c>
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000118 	.word	0x20000118
 8002b8c:	10624dd3 	.word	0x10624dd3

08002b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d07d      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb0:	4b4f      	ldr	r3, [pc, #316]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	61d3      	str	r3, [r2, #28]
 8002bc8:	4b49      	ldr	r3, [pc, #292]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	4b46      	ldr	r3, [pc, #280]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d118      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a42      	ldr	r2, [pc, #264]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf0:	f7fd fad4 	bl	800019c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fd fad0 	bl	800019c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e06d      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b3a      	ldr	r3, [pc, #232]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d02e      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d027      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c4a:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d014      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fd fa9f 	bl	800019c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fd fa9b 	bl	800019c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e036      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ee      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4917      	ldr	r1, [pc, #92]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	490b      	ldr	r1, [pc, #44]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42420440 	.word	0x42420440

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01d      	b.n	8002d4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f003 fec6 	bl	8006ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fa10 	bl	8003160 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d007      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9a4 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f997 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9a6 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0204 	mvn.w	r2, #4
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f97a 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f96d 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f97c 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0208 	mvn.w	r2, #8
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2204      	movs	r2, #4
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f950 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f943 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f952 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0210 	mvn.w	r2, #16
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f926 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f919 	bl	8003116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f928 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0201 	mvn.w	r2, #1
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f003 fb9c 	bl	8006654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa51 	bl	80033ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8ec 	bl	800314c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0220 	mvn.w	r2, #32
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa1c 	bl	80033d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_ConfigClockSource+0x18>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0a6      	b.n	800310e <HAL_TIM_ConfigClockSource+0x166>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d067      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0x120>
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d80b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x6c>
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d073      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
 8003000:	2b10      	cmp	r3, #16
 8003002:	d802      	bhi.n	800300a <HAL_TIM_ConfigClockSource+0x62>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d06f      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003008:	e078      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800300a:	2b20      	cmp	r3, #32
 800300c:	d06c      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
 800300e:	2b30      	cmp	r3, #48	; 0x30
 8003010:	d06a      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003012:	e073      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003014:	2b70      	cmp	r3, #112	; 0x70
 8003016:	d00d      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x8c>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d804      	bhi.n	8003026 <HAL_TIM_ConfigClockSource+0x7e>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d033      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0xe0>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d041      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003024:	e06a      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d066      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x152>
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d017      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003032:	e063      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f000 f965 	bl	8003312 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003056:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]
      break;
 8003060:	e04c      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f000 f94e 	bl	8003312 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003084:	609a      	str	r2, [r3, #8]
      break;
 8003086:	e039      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	461a      	mov	r2, r3
 8003096:	f000 f8c5 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2150      	movs	r1, #80	; 0x50
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f91c 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030a6:	e029      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f000 f8e3 	bl	8003280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2160      	movs	r1, #96	; 0x60
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f90c 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030c6:	e019      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 f8a5 	bl	8003224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2140      	movs	r1, #64	; 0x40
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f8fc 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030e6:	e009      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f000 f8f3 	bl	80032de <TIM_ITRx_SetConfig>
      break;
 80030f8:	e000      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80030fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
	...

08003160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a26      	ldr	r2, [pc, #152]	; (800321c <TIM_Base_SetConfig+0xbc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a25      	ldr	r2, [pc, #148]	; (8003220 <TIM_Base_SetConfig+0xc0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a19      	ldr	r2, [pc, #100]	; (800321c <TIM_Base_SetConfig+0xbc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <TIM_Base_SetConfig+0xc0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	615a      	str	r2, [r3, #20]
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800

08003224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 030a 	bic.w	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 0210 	bic.w	r2, r3, #16
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	031b      	lsls	r3, r3, #12
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	621a      	str	r2, [r3, #32]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f043 0307 	orr.w	r3, r3, #7
 8003300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	021a      	lsls	r2, r3, #8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	431a      	orrs	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e032      	b.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e03f      	b.n	800348e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f003 fb94 	bl	8006b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f90b 	bl	800365c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b088      	sub	sp, #32
 800349a:	af02      	add	r7, sp, #8
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	f040 8083 	bne.w	80035be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Transmit+0x2e>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e07b      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x40>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e074      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ec:	f7fc fe56 	bl	800019c <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034fe:	e042      	b.n	8003586 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d122      	bne.n	800355e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f850 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e046      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3302      	adds	r3, #2
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	e017      	b.n	8003586 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	e013      	b.n	8003586 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f82d 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e023      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60ba      	str	r2, [r7, #8]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1b7      	bne.n	8003500 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f814 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	e02c      	b.n	8003634 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	d028      	beq.n	8003634 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e8:	f7fc fdd8 	bl	800019c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d21d      	bcs.n	8003634 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003606:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e00f      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d0c3      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003696:	f023 030c 	bic.w	r3, r3, #12
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <UART_SetConfig+0x1ac>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d14e      	bne.n	8003762 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7ff fa02 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 80036c8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009a      	lsls	r2, r3, #2
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <UART_SetConfig+0x1b0>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	0119      	lsls	r1, r3, #4
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009a      	lsls	r2, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003700:	4b42      	ldr	r3, [pc, #264]	; (800380c <UART_SetConfig+0x1b0>)
 8003702:	fba3 0302 	umull	r0, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2064      	movs	r0, #100	; 0x64
 800370a:	fb00 f303 	mul.w	r3, r0, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	3332      	adds	r3, #50	; 0x32
 8003714:	4a3d      	ldr	r2, [pc, #244]	; (800380c <UART_SetConfig+0x1b0>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003720:	4419      	add	r1, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	441a      	add	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	fbb2 f2f3 	udiv	r2, r2, r3
 8003738:	4b34      	ldr	r3, [pc, #208]	; (800380c <UART_SetConfig+0x1b0>)
 800373a:	fba3 0302 	umull	r0, r3, r3, r2
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2064      	movs	r0, #100	; 0x64
 8003742:	fb00 f303 	mul.w	r3, r0, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	3332      	adds	r3, #50	; 0x32
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <UART_SetConfig+0x1b0>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f003 020f 	and.w	r2, r3, #15
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	440a      	add	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003760:	e04d      	b.n	80037fe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7ff f99f 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8003766:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009a      	lsls	r2, r3, #2
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	4a23      	ldr	r2, [pc, #140]	; (800380c <UART_SetConfig+0x1b0>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	0119      	lsls	r1, r3, #4
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009a      	lsls	r2, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	fbb2 f2f3 	udiv	r2, r2, r3
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <UART_SetConfig+0x1b0>)
 80037a0:	fba3 0302 	umull	r0, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2064      	movs	r0, #100	; 0x64
 80037a8:	fb00 f303 	mul.w	r3, r0, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <UART_SetConfig+0x1b0>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037be:	4419      	add	r1, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <UART_SetConfig+0x1b0>)
 80037d8:	fba3 0302 	umull	r0, r3, r3, r2
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	2064      	movs	r0, #100	; 0x64
 80037e0:	fb00 f303 	mul.w	r3, r0, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	3332      	adds	r3, #50	; 0x32
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <UART_SetConfig+0x1b0>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	440a      	add	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40013800 	.word	0x40013800
 800380c:	51eb851f 	.word	0x51eb851f

08003810 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003810:	b084      	sub	sp, #16
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	f107 0014 	add.w	r0, r7, #20
 800381e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	b004      	add	sp, #16
 800382e:	4770      	bx	lr

08003830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003838:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800383c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003844:	b29a      	uxth	r2, r3
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	4313      	orrs	r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003866:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800386a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003872:	b29b      	uxth	r3, r3
 8003874:	b21a      	sxth	r2, r3
 8003876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800387a:	43db      	mvns	r3, r3
 800387c:	b21b      	sxth	r3, r3
 800387e:	4013      	ands	r3, r2
 8003880:	b21b      	sxth	r3, r3
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038ae:	b084      	sub	sp, #16
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	f107 0014 	add.w	r0, r7, #20
 80038bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ffa5 	bl	8003830 <USB_EnableGlobalInt>

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038f2:	b004      	add	sp, #16
 80038f4:	4770      	bx	lr
	...

080038f8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038f8:	b490      	push	{r4, r7}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	78db      	ldrb	r3, [r3, #3]
 8003922:	2b03      	cmp	r3, #3
 8003924:	d819      	bhi.n	800395a <USB_ActivateEndpoint+0x62>
 8003926:	a201      	add	r2, pc, #4	; (adr r2, 800392c <USB_ActivateEndpoint+0x34>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	0800393d 	.word	0x0800393d
 8003930:	08003951 	.word	0x08003951
 8003934:	08003961 	.word	0x08003961
 8003938:	08003947 	.word	0x08003947
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800393c:	89bb      	ldrh	r3, [r7, #12]
 800393e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003942:	81bb      	strh	r3, [r7, #12]
      break;
 8003944:	e00d      	b.n	8003962 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003946:	89bb      	ldrh	r3, [r7, #12]
 8003948:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800394c:	81bb      	strh	r3, [r7, #12]
      break;
 800394e:	e008      	b.n	8003962 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003950:	89bb      	ldrh	r3, [r7, #12]
 8003952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003956:	81bb      	strh	r3, [r7, #12]
      break;
 8003958:	e003      	b.n	8003962 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      break;
 800395e:	e000      	b.n	8003962 <USB_ActivateEndpoint+0x6a>
      break;
 8003960:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	89bb      	ldrh	r3, [r7, #12]
 800396e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	b29b      	uxth	r3, r3
 8003980:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	b29a      	uxth	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b29c      	uxth	r4, r3
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	4b8a      	ldr	r3, [pc, #552]	; (8003bd8 <USB_ActivateEndpoint+0x2e0>)
 80039b0:	4323      	orrs	r3, r4
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	7b1b      	ldrb	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8112 	bne.w	8003be4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	785b      	ldrb	r3, [r3, #1]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d067      	beq.n	8003a98 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039c8:	687c      	ldr	r4, [r7, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	441c      	add	r4, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4423      	add	r3, r4
 80039dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e0:	461c      	mov	r4, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	88db      	ldrh	r3, [r3, #6]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29c      	uxth	r4, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d014      	beq.n	8003a32 <USB_ActivateEndpoint+0x13a>
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	b29c      	uxth	r4, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <USB_ActivateEndpoint+0x2e4>)
 8003a2c:	4323      	orrs	r3, r4
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	78db      	ldrb	r3, [r3, #3]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d018      	beq.n	8003a6c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a50:	b29c      	uxth	r4, r3
 8003a52:	f084 0320 	eor.w	r3, r4, #32
 8003a56:	b29c      	uxth	r4, r3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <USB_ActivateEndpoint+0x2e0>)
 8003a64:	4323      	orrs	r3, r4
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	8013      	strh	r3, [r2, #0]
 8003a6a:	e22b      	b.n	8003ec4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a82:	b29c      	uxth	r4, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	4b52      	ldr	r3, [pc, #328]	; (8003bd8 <USB_ActivateEndpoint+0x2e0>)
 8003a90:	4323      	orrs	r3, r4
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]
 8003a96:	e215      	b.n	8003ec4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a98:	687c      	ldr	r4, [r7, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	441c      	add	r4, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4423      	add	r3, r4
 8003aac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ab0:	461c      	mov	r4, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	88db      	ldrh	r3, [r3, #6]
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ac0:	687c      	ldr	r4, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	441c      	add	r4, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4423      	add	r3, r4
 8003ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ad8:	461c      	mov	r4, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10e      	bne.n	8003b00 <USB_ActivateEndpoint+0x208>
 8003ae2:	8823      	ldrh	r3, [r4, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8023      	strh	r3, [r4, #0]
 8003aee:	8823      	ldrh	r3, [r4, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	8023      	strh	r3, [r4, #0]
 8003afe:	e02d      	b.n	8003b5c <USB_ActivateEndpoint+0x264>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b3e      	cmp	r3, #62	; 0x3e
 8003b06:	d812      	bhi.n	8003b2e <USB_ActivateEndpoint+0x236>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <USB_ActivateEndpoint+0x22a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	029b      	lsls	r3, r3, #10
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	8023      	strh	r3, [r4, #0]
 8003b2c:	e016      	b.n	8003b5c <USB_ActivateEndpoint+0x264>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <USB_ActivateEndpoint+0x250>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	029b      	lsls	r3, r3, #10
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29c      	uxth	r4, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d014      	beq.n	8003b9e <USB_ActivateEndpoint+0x2a6>
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	b29c      	uxth	r4, r3
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <USB_ActivateEndpoint+0x2e8>)
 8003b98:	4323      	orrs	r3, r4
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	b29c      	uxth	r4, r3
 8003bb6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bba:	b29c      	uxth	r4, r3
 8003bbc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003bc0:	b29c      	uxth	r4, r3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	441a      	add	r2, r3
 8003bcc:	4b02      	ldr	r3, [pc, #8]	; (8003bd8 <USB_ActivateEndpoint+0x2e0>)
 8003bce:	4323      	orrs	r3, r4
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8013      	strh	r3, [r2, #0]
 8003bd4:	e176      	b.n	8003ec4 <USB_ActivateEndpoint+0x5cc>
 8003bd6:	bf00      	nop
 8003bd8:	ffff8080 	.word	0xffff8080
 8003bdc:	ffff80c0 	.word	0xffff80c0
 8003be0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	b29c      	uxth	r4, r3
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	4b96      	ldr	r3, [pc, #600]	; (8003e60 <USB_ActivateEndpoint+0x568>)
 8003c08:	4323      	orrs	r3, r4
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c0e:	687c      	ldr	r4, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	441c      	add	r4, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	4423      	add	r3, r4
 8003c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c26:	461c      	mov	r4, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	891b      	ldrh	r3, [r3, #8]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8023      	strh	r3, [r4, #0]
 8003c36:	687c      	ldr	r4, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	441c      	add	r4, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4423      	add	r3, r4
 8003c4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c4e:	461c      	mov	r4, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	895b      	ldrh	r3, [r3, #10]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 8088 	bne.w	8003d78 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29c      	uxth	r4, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d014      	beq.n	8003caa <USB_ActivateEndpoint+0x3b2>
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	b29c      	uxth	r4, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <USB_ActivateEndpoint+0x56c>)
 8003ca4:	4323      	orrs	r3, r4
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29c      	uxth	r4, r3
 8003cb8:	4623      	mov	r3, r4
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d014      	beq.n	8003cec <USB_ActivateEndpoint+0x3f4>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	b29c      	uxth	r4, r3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	4b60      	ldr	r3, [pc, #384]	; (8003e68 <USB_ActivateEndpoint+0x570>)
 8003ce6:	4323      	orrs	r3, r4
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	b29c      	uxth	r4, r3
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	4b56      	ldr	r3, [pc, #344]	; (8003e68 <USB_ActivateEndpoint+0x570>)
 8003d10:	4323      	orrs	r3, r4
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	b29c      	uxth	r4, r3
 8003d2e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d32:	b29c      	uxth	r4, r3
 8003d34:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d38:	b29c      	uxth	r4, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <USB_ActivateEndpoint+0x574>)
 8003d46:	4323      	orrs	r3, r4
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d62:	b29c      	uxth	r4, r3
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <USB_ActivateEndpoint+0x574>)
 8003d70:	4323      	orrs	r3, r4
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]
 8003d76:	e0a5      	b.n	8003ec4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29c      	uxth	r4, r3
 8003d86:	4623      	mov	r3, r4
 8003d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d014      	beq.n	8003dba <USB_ActivateEndpoint+0x4c2>
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	b29c      	uxth	r4, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <USB_ActivateEndpoint+0x56c>)
 8003db4:	4323      	orrs	r3, r4
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29c      	uxth	r4, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d014      	beq.n	8003dfc <USB_ActivateEndpoint+0x504>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de8:	b29c      	uxth	r4, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	441a      	add	r2, r3
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <USB_ActivateEndpoint+0x570>)
 8003df6:	4323      	orrs	r3, r4
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	b29c      	uxth	r4, r3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	441a      	add	r2, r3
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <USB_ActivateEndpoint+0x56c>)
 8003e20:	4323      	orrs	r3, r4
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	78db      	ldrb	r3, [r3, #3]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d020      	beq.n	8003e70 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e44:	b29c      	uxth	r4, r3
 8003e46:	f084 0320 	eor.w	r3, r4, #32
 8003e4a:	b29c      	uxth	r4, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <USB_ActivateEndpoint+0x574>)
 8003e58:	4323      	orrs	r3, r4
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8013      	strh	r3, [r2, #0]
 8003e5e:	e01c      	b.n	8003e9a <USB_ActivateEndpoint+0x5a2>
 8003e60:	ffff8180 	.word	0xffff8180
 8003e64:	ffffc080 	.word	0xffffc080
 8003e68:	ffff80c0 	.word	0xffff80c0
 8003e6c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e86:	b29c      	uxth	r4, r3
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <USB_ActivateEndpoint+0x5d8>)
 8003e94:	4323      	orrs	r3, r4
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	b29c      	uxth	r4, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <USB_ActivateEndpoint+0x5d8>)
 8003ebe:	4323      	orrs	r3, r4
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc90      	pop	{r4, r7}
 8003ece:	4770      	bx	lr
 8003ed0:	ffff8080 	.word	0xffff8080

08003ed4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ed4:	b490      	push	{r4, r7}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	7b1b      	ldrb	r3, [r3, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d171      	bne.n	8003fca <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d036      	beq.n	8003f5c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29c      	uxth	r4, r3
 8003efc:	4623      	mov	r3, r4
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <USB_DeactivateEndpoint+0x5c>
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1c:	b29c      	uxth	r4, r3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <USB_DeactivateEndpoint+0x204>)
 8003f2a:	4323      	orrs	r3, r4
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	4b62      	ldr	r3, [pc, #392]	; (80040dc <USB_DeactivateEndpoint+0x208>)
 8003f54:	4323      	orrs	r3, r4
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]
 8003f5a:	e144      	b.n	80041e6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29c      	uxth	r4, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d014      	beq.n	8003f9e <USB_DeactivateEndpoint+0xca>
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	b29c      	uxth	r4, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <USB_DeactivateEndpoint+0x20c>)
 8003f98:	4323      	orrs	r3, r4
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb4:	b29c      	uxth	r4, r3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	441a      	add	r2, r3
 8003fc0:	4b46      	ldr	r3, [pc, #280]	; (80040dc <USB_DeactivateEndpoint+0x208>)
 8003fc2:	4323      	orrs	r3, r4
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
 8003fc8:	e10d      	b.n	80041e6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	785b      	ldrb	r3, [r3, #1]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8088 	bne.w	80040e4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29c      	uxth	r4, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d014      	beq.n	8004016 <USB_DeactivateEndpoint+0x142>
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	b29c      	uxth	r4, r3
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <USB_DeactivateEndpoint+0x20c>)
 8004010:	4323      	orrs	r3, r4
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29c      	uxth	r4, r3
 8004024:	4623      	mov	r3, r4
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d014      	beq.n	8004058 <USB_DeactivateEndpoint+0x184>
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	b29c      	uxth	r4, r3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <USB_DeactivateEndpoint+0x204>)
 8004052:	4323      	orrs	r3, r4
 8004054:	b29b      	uxth	r3, r3
 8004056:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	b29c      	uxth	r4, r3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <USB_DeactivateEndpoint+0x204>)
 800407c:	4323      	orrs	r3, r4
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	b29c      	uxth	r4, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <USB_DeactivateEndpoint+0x208>)
 80040a6:	4323      	orrs	r3, r4
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c2:	b29c      	uxth	r4, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	4b03      	ldr	r3, [pc, #12]	; (80040dc <USB_DeactivateEndpoint+0x208>)
 80040d0:	4323      	orrs	r3, r4
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	8013      	strh	r3, [r2, #0]
 80040d6:	e086      	b.n	80041e6 <USB_DeactivateEndpoint+0x312>
 80040d8:	ffff80c0 	.word	0xffff80c0
 80040dc:	ffff8080 	.word	0xffff8080
 80040e0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29c      	uxth	r4, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d014      	beq.n	8004126 <USB_DeactivateEndpoint+0x252>
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	b29c      	uxth	r4, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <USB_DeactivateEndpoint+0x320>)
 8004120:	4323      	orrs	r3, r4
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29c      	uxth	r4, r3
 8004134:	4623      	mov	r3, r4
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <USB_DeactivateEndpoint+0x294>
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	b29c      	uxth	r4, r3
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	441a      	add	r2, r3
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <USB_DeactivateEndpoint+0x324>)
 8004162:	4323      	orrs	r3, r4
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	b29c      	uxth	r4, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	441a      	add	r2, r3
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <USB_DeactivateEndpoint+0x320>)
 800418c:	4323      	orrs	r3, r4
 800418e:	b29b      	uxth	r3, r3
 8004190:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a8:	b29c      	uxth	r4, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <USB_DeactivateEndpoint+0x328>)
 80041b6:	4323      	orrs	r3, r4
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	b29c      	uxth	r4, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <USB_DeactivateEndpoint+0x328>)
 80041e0:	4323      	orrs	r3, r4
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc90      	pop	{r4, r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	ffffc080 	.word	0xffffc080
 80041f8:	ffff80c0 	.word	0xffff80c0
 80041fc:	ffff8080 	.word	0xffff8080

08004200 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b08d      	sub	sp, #52	; 0x34
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b01      	cmp	r3, #1
 8004210:	f040 8160 	bne.w	80044d4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d909      	bls.n	8004234 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	619a      	str	r2, [r3, #24]
 8004232:	e005      	b.n	8004240 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d119      	bne.n	800427c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6959      	ldr	r1, [r3, #20]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	88da      	ldrh	r2, [r3, #6]
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	b29b      	uxth	r3, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fba2 	bl	800499e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800425a:	687c      	ldr	r4, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	441c      	add	r4, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	4423      	add	r3, r4
 800426e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004272:	461c      	mov	r4, r3
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	b29b      	uxth	r3, r3
 8004278:	8023      	strh	r3, [r4, #0]
 800427a:	e10f      	b.n	800449c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d065      	beq.n	800435e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004292:	687c      	ldr	r4, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d148      	bne.n	800432e <USB_EPStartXfer+0x12e>
 800429c:	687c      	ldr	r4, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	441c      	add	r4, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4423      	add	r3, r4
 80042b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b4:	461c      	mov	r4, r3
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10e      	bne.n	80042da <USB_EPStartXfer+0xda>
 80042bc:	8823      	ldrh	r3, [r4, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8023      	strh	r3, [r4, #0]
 80042c8:	8823      	ldrh	r3, [r4, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8023      	strh	r3, [r4, #0]
 80042d8:	e03d      	b.n	8004356 <USB_EPStartXfer+0x156>
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2b3e      	cmp	r3, #62	; 0x3e
 80042de:	d810      	bhi.n	8004302 <USB_EPStartXfer+0x102>
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <USB_EPStartXfer+0xf6>
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	3301      	adds	r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8023      	strh	r3, [r4, #0]
 8004300:	e029      	b.n	8004356 <USB_EPStartXfer+0x156>
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <USB_EPStartXfer+0x118>
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	3b01      	subs	r3, #1
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	b29b      	uxth	r3, r3
 800431c:	029b      	lsls	r3, r3, #10
 800431e:	b29b      	uxth	r3, r3
 8004320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004328:	b29b      	uxth	r3, r3
 800432a:	8023      	strh	r3, [r4, #0]
 800432c:	e013      	b.n	8004356 <USB_EPStartXfer+0x156>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10f      	bne.n	8004356 <USB_EPStartXfer+0x156>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	441c      	add	r4, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	4423      	add	r3, r4
 8004348:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	895b      	ldrh	r3, [r3, #10]
 800435a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800435c:	e063      	b.n	8004426 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d148      	bne.n	80043f8 <USB_EPStartXfer+0x1f8>
 8004366:	687c      	ldr	r4, [r7, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	441c      	add	r4, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	4423      	add	r3, r4
 800437a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800437e:	461c      	mov	r4, r3
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10e      	bne.n	80043a4 <USB_EPStartXfer+0x1a4>
 8004386:	8823      	ldrh	r3, [r4, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800438e:	b29b      	uxth	r3, r3
 8004390:	8023      	strh	r3, [r4, #0]
 8004392:	8823      	ldrh	r3, [r4, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8023      	strh	r3, [r4, #0]
 80043a2:	e03d      	b.n	8004420 <USB_EPStartXfer+0x220>
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2b3e      	cmp	r3, #62	; 0x3e
 80043a8:	d810      	bhi.n	80043cc <USB_EPStartXfer+0x1cc>
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <USB_EPStartXfer+0x1c0>
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	3301      	adds	r3, #1
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	029b      	lsls	r3, r3, #10
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8023      	strh	r3, [r4, #0]
 80043ca:	e029      	b.n	8004420 <USB_EPStartXfer+0x220>
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <USB_EPStartXfer+0x1e2>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	3b01      	subs	r3, #1
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	029b      	lsls	r3, r3, #10
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8023      	strh	r3, [r4, #0]
 80043f6:	e013      	b.n	8004420 <USB_EPStartXfer+0x220>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10f      	bne.n	8004420 <USB_EPStartXfer+0x220>
 8004400:	687c      	ldr	r4, [r7, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	441c      	add	r4, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4423      	add	r3, r4
 8004414:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004418:	461c      	mov	r4, r3
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	b29b      	uxth	r3, r3
 800441e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	891b      	ldrh	r3, [r3, #8]
 8004424:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6959      	ldr	r1, [r3, #20]
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	b29b      	uxth	r3, r3
 800442e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fab4 	bl	800499e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d115      	bne.n	800446a <USB_EPStartXfer+0x26a>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004454:	b29c      	uxth	r4, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	4b9a      	ldr	r3, [pc, #616]	; (80046cc <USB_EPStartXfer+0x4cc>)
 8004462:	4323      	orrs	r3, r4
 8004464:	b29b      	uxth	r3, r3
 8004466:	8013      	strh	r3, [r2, #0]
 8004468:	e018      	b.n	800449c <USB_EPStartXfer+0x29c>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d114      	bne.n	800449c <USB_EPStartXfer+0x29c>
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	b29c      	uxth	r4, r3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	4b8e      	ldr	r3, [pc, #568]	; (80046d0 <USB_EPStartXfer+0x4d0>)
 8004496:	4323      	orrs	r3, r4
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b2:	b29c      	uxth	r4, r3
 80044b4:	f084 0310 	eor.w	r3, r4, #16
 80044b8:	b29c      	uxth	r4, r3
 80044ba:	f084 0320 	eor.w	r3, r4, #32
 80044be:	b29c      	uxth	r4, r3
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	4b82      	ldr	r3, [pc, #520]	; (80046d4 <USB_EPStartXfer+0x4d4>)
 80044cc:	4323      	orrs	r3, r4
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]
 80044d2:	e146      	b.n	8004762 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d909      	bls.n	80044f4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	1ad2      	subs	r2, r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	619a      	str	r2, [r3, #24]
 80044f2:	e005      	b.n	8004500 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d148      	bne.n	800459a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004508:	687c      	ldr	r4, [r7, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	441c      	add	r4, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4423      	add	r3, r4
 800451c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004520:	461c      	mov	r4, r3
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10e      	bne.n	8004546 <USB_EPStartXfer+0x346>
 8004528:	8823      	ldrh	r3, [r4, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004530:	b29b      	uxth	r3, r3
 8004532:	8023      	strh	r3, [r4, #0]
 8004534:	8823      	ldrh	r3, [r4, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800453c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004540:	b29b      	uxth	r3, r3
 8004542:	8023      	strh	r3, [r4, #0]
 8004544:	e0f2      	b.n	800472c <USB_EPStartXfer+0x52c>
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b3e      	cmp	r3, #62	; 0x3e
 800454a:	d810      	bhi.n	800456e <USB_EPStartXfer+0x36e>
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <USB_EPStartXfer+0x362>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3301      	adds	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	b29b      	uxth	r3, r3
 8004566:	029b      	lsls	r3, r3, #10
 8004568:	b29b      	uxth	r3, r3
 800456a:	8023      	strh	r3, [r4, #0]
 800456c:	e0de      	b.n	800472c <USB_EPStartXfer+0x52c>
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <USB_EPStartXfer+0x384>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3b01      	subs	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	b29b      	uxth	r3, r3
 8004588:	029b      	lsls	r3, r3, #10
 800458a:	b29b      	uxth	r3, r3
 800458c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004594:	b29b      	uxth	r3, r3
 8004596:	8023      	strh	r3, [r4, #0]
 8004598:	e0c8      	b.n	800472c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d148      	bne.n	8004634 <USB_EPStartXfer+0x434>
 80045a2:	687c      	ldr	r4, [r7, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	441c      	add	r4, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	4423      	add	r3, r4
 80045b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ba:	461c      	mov	r4, r3
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10e      	bne.n	80045e0 <USB_EPStartXfer+0x3e0>
 80045c2:	8823      	ldrh	r3, [r4, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8023      	strh	r3, [r4, #0]
 80045ce:	8823      	ldrh	r3, [r4, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8023      	strh	r3, [r4, #0]
 80045de:	e03d      	b.n	800465c <USB_EPStartXfer+0x45c>
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2b3e      	cmp	r3, #62	; 0x3e
 80045e4:	d810      	bhi.n	8004608 <USB_EPStartXfer+0x408>
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <USB_EPStartXfer+0x3fc>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	029b      	lsls	r3, r3, #10
 8004602:	b29b      	uxth	r3, r3
 8004604:	8023      	strh	r3, [r4, #0]
 8004606:	e029      	b.n	800465c <USB_EPStartXfer+0x45c>
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <USB_EPStartXfer+0x41e>
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	3b01      	subs	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	b29b      	uxth	r3, r3
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	b29b      	uxth	r3, r3
 8004626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462e:	b29b      	uxth	r3, r3
 8004630:	8023      	strh	r3, [r4, #0]
 8004632:	e013      	b.n	800465c <USB_EPStartXfer+0x45c>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10f      	bne.n	800465c <USB_EPStartXfer+0x45c>
 800463c:	687c      	ldr	r4, [r7, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004644:	b29b      	uxth	r3, r3
 8004646:	441c      	add	r4, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4423      	add	r3, r4
 8004650:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004654:	461c      	mov	r4, r3
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	b29b      	uxth	r3, r3
 800465a:	8023      	strh	r3, [r4, #0]
 800465c:	687c      	ldr	r4, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d14e      	bne.n	8004704 <USB_EPStartXfer+0x504>
 8004666:	687c      	ldr	r4, [r7, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466e:	b29b      	uxth	r3, r3
 8004670:	441c      	add	r4, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	4423      	add	r3, r4
 800467a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800467e:	461c      	mov	r4, r3
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10e      	bne.n	80046a4 <USB_EPStartXfer+0x4a4>
 8004686:	8823      	ldrh	r3, [r4, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800468e:	b29b      	uxth	r3, r3
 8004690:	8023      	strh	r3, [r4, #0]
 8004692:	8823      	ldrh	r3, [r4, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8023      	strh	r3, [r4, #0]
 80046a2:	e043      	b.n	800472c <USB_EPStartXfer+0x52c>
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b3e      	cmp	r3, #62	; 0x3e
 80046a8:	d816      	bhi.n	80046d8 <USB_EPStartXfer+0x4d8>
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <USB_EPStartXfer+0x4c0>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	3301      	adds	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	8023      	strh	r3, [r4, #0]
 80046ca:	e02f      	b.n	800472c <USB_EPStartXfer+0x52c>
 80046cc:	ffff80c0 	.word	0xffff80c0
 80046d0:	ffffc080 	.word	0xffffc080
 80046d4:	ffff8080 	.word	0xffff8080
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <USB_EPStartXfer+0x4ee>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	029b      	lsls	r3, r3, #10
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8023      	strh	r3, [r4, #0]
 8004702:	e013      	b.n	800472c <USB_EPStartXfer+0x52c>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10f      	bne.n	800472c <USB_EPStartXfer+0x52c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	441c      	add	r4, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	4423      	add	r3, r4
 800471e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	b29a      	uxth	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	b29c      	uxth	r4, r3
 8004744:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004748:	b29c      	uxth	r4, r3
 800474a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800474e:	b29c      	uxth	r4, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	4b04      	ldr	r3, [pc, #16]	; (800476c <USB_EPStartXfer+0x56c>)
 800475c:	4323      	orrs	r3, r4
 800475e:	b29b      	uxth	r3, r3
 8004760:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3734      	adds	r7, #52	; 0x34
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	ffff8080 	.word	0xffff8080

08004770 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004770:	b490      	push	{r4, r7}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d018      	beq.n	80047b4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	b29c      	uxth	r4, r3
 800479a:	f084 0310 	eor.w	r3, r4, #16
 800479e:	b29c      	uxth	r4, r3
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <USB_EPSetStall+0x80>)
 80047ac:	4323      	orrs	r3, r4
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8013      	strh	r3, [r2, #0]
 80047b2:	e017      	b.n	80047e4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	b29c      	uxth	r4, r3
 80047cc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80047d0:	b29c      	uxth	r4, r3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <USB_EPSetStall+0x80>)
 80047de:	4323      	orrs	r3, r4
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc90      	pop	{r4, r7}
 80047ee:	4770      	bx	lr
 80047f0:	ffff8080 	.word	0xffff8080

080047f4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047f4:	b490      	push	{r4, r7}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	7b1b      	ldrb	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d17d      	bne.n	8004902 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03d      	beq.n	800488a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29c      	uxth	r4, r3
 800481c:	4623      	mov	r3, r4
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d014      	beq.n	8004850 <USB_EPClearStall+0x5c>
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	b29c      	uxth	r4, r3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	4b31      	ldr	r3, [pc, #196]	; (8004910 <USB_EPClearStall+0x11c>)
 800484a:	4323      	orrs	r3, r4
 800484c:	b29b      	uxth	r3, r3
 800484e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	78db      	ldrb	r3, [r3, #3]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d054      	beq.n	8004902 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486e:	b29c      	uxth	r4, r3
 8004870:	f084 0320 	eor.w	r3, r4, #32
 8004874:	b29c      	uxth	r4, r3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	441a      	add	r2, r3
 8004880:	4b24      	ldr	r3, [pc, #144]	; (8004914 <USB_EPClearStall+0x120>)
 8004882:	4323      	orrs	r3, r4
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
 8004888:	e03b      	b.n	8004902 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29c      	uxth	r4, r3
 8004898:	4623      	mov	r3, r4
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <USB_EPClearStall+0xd8>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	b29c      	uxth	r4, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <USB_EPClearStall+0x124>)
 80048c6:	4323      	orrs	r3, r4
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	b29c      	uxth	r4, r3
 80048e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80048e8:	b29c      	uxth	r4, r3
 80048ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80048ee:	b29c      	uxth	r4, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <USB_EPClearStall+0x120>)
 80048fc:	4323      	orrs	r3, r4
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bc90      	pop	{r4, r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	ffff80c0 	.word	0xffff80c0
 8004914:	ffff8080 	.word	0xffff8080
 8004918:	ffffc080 	.word	0xffffc080

0800491c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004978:	b29b      	uxth	r3, r3
 800497a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800499e:	b480      	push	{r7}
 80049a0:	b08d      	sub	sp, #52	; 0x34
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	4611      	mov	r1, r2
 80049aa:	461a      	mov	r2, r3
 80049ac:	460b      	mov	r3, r1
 80049ae:	80fb      	strh	r3, [r7, #6]
 80049b0:	4613      	mov	r3, r2
 80049b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80049b4:	88bb      	ldrh	r3, [r7, #4]
 80049b6:	3301      	adds	r3, #1
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	005a      	lsls	r2, r3, #1
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	e01e      	b.n	8004a16 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	3301      	adds	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	3302      	adds	r3, #2
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	3302      	adds	r3, #2
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	3b01      	subs	r3, #1
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1dd      	bne.n	80049d8 <USB_WritePMA+0x3a>
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3734      	adds	r7, #52	; 0x34
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b08b      	sub	sp, #44	; 0x2c
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	4611      	mov	r1, r2
 8004a32:	461a      	mov	r2, r3
 8004a34:	460b      	mov	r3, r1
 8004a36:	80fb      	strh	r3, [r7, #6]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004a3c:	88bb      	ldrh	r3, [r7, #4]
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	005a      	lsls	r2, r3, #1
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a58:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	e01b      	b.n	8004a98 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	3302      	adds	r3, #2
 8004a90:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	3b01      	subs	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e0      	bne.n	8004a60 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004a9e:	88bb      	ldrh	r3, [r7, #4]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8004aba:	bf00      	nop
 8004abc:	372c      	adds	r7, #44	; 0x2c
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7c1b      	ldrb	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d115      	bne.n	8004b08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	2181      	movs	r1, #129	; 0x81
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f002 fa6e 	bl	8006fc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af4:	2202      	movs	r2, #2
 8004af6:	2101      	movs	r1, #1
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f002 fa64 	bl	8006fc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004b06:	e012      	b.n	8004b2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	2181      	movs	r1, #129	; 0x81
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f002 fa59 	bl	8006fc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b1a:	2340      	movs	r3, #64	; 0x40
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	2101      	movs	r1, #1
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f002 fa50 	bl	8006fc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b2e:	2308      	movs	r3, #8
 8004b30:	2203      	movs	r2, #3
 8004b32:	2182      	movs	r1, #130	; 0x82
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f002 fa46 	bl	8006fc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b44:	f002 fb60 	bl	8007208 <USBD_static_malloc>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
 8004b5e:	e026      	b.n	8004bae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7c1b      	ldrb	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b94:	2101      	movs	r1, #1
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f002 faff 	bl	800719a <USBD_LL_PrepareReceive>
 8004b9c:	e007      	b.n	8004bae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ba4:	2340      	movs	r3, #64	; 0x40
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f002 faf6 	bl	800719a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004bc8:	2181      	movs	r1, #129	; 0x81
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f002 fa21 	bl	8007012 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f002 fa1a 	bl	8007012 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004be6:	2182      	movs	r1, #130	; 0x82
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f002 fa12 	bl	8007012 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00e      	beq.n	8004c1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 fb06 	bl	8007220 <USBD_static_free>
    pdev->pClassData = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d039      	beq.n	8004cc4 <USBD_CDC_Setup+0x9e>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d17c      	bne.n	8004d4e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	88db      	ldrh	r3, [r3, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d029      	beq.n	8004cb0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da11      	bge.n	8004c8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004c72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	88d2      	ldrh	r2, [r2, #6]
 8004c78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c7a:	6939      	ldr	r1, [r7, #16]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	88db      	ldrh	r3, [r3, #6]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 f9e0 	bl	8006048 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004c88:	e068      	b.n	8004d5c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	785a      	ldrb	r2, [r3, #1]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	88db      	ldrh	r3, [r3, #6]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004ca0:	6939      	ldr	r1, [r7, #16]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	88db      	ldrh	r3, [r3, #6]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 f9fb 	bl	80060a4 <USBD_CtlPrepareRx>
      break;
 8004cae:	e055      	b.n	8004d5c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	7850      	ldrb	r0, [r2, #1]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	4798      	blx	r3
      break;
 8004cc2:	e04b      	b.n	8004d5c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	785b      	ldrb	r3, [r3, #1]
 8004cc8:	2b0a      	cmp	r3, #10
 8004cca:	d017      	beq.n	8004cfc <USBD_CDC_Setup+0xd6>
 8004ccc:	2b0b      	cmp	r3, #11
 8004cce:	d029      	beq.n	8004d24 <USBD_CDC_Setup+0xfe>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d133      	bne.n	8004d3c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d107      	bne.n	8004cee <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004cde:	f107 030c 	add.w	r3, r7, #12
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f001 f9ae 	bl	8006048 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cec:	e02e      	b.n	8004d4c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f001 f93f 	bl	8005f74 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8004cfa:	e027      	b.n	8004d4c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d107      	bne.n	8004d16 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d06:	f107 030f 	add.w	r3, r7, #15
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 f99a 	bl	8006048 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d14:	e01a      	b.n	8004d4c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 f92b 	bl	8005f74 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	75fb      	strb	r3, [r7, #23]
          break;
 8004d22:	e013      	b.n	8004d4c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d00d      	beq.n	8004d4a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f91f 	bl	8005f74 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d36:	2302      	movs	r3, #2
 8004d38:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d3a:	e006      	b.n	8004d4a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 f918 	bl	8005f74 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d44:	2302      	movs	r3, #2
 8004d46:	75fb      	strb	r3, [r7, #23]
          break;
 8004d48:	e000      	b.n	8004d4c <USBD_CDC_Setup+0x126>
          break;
 8004d4a:	bf00      	nop
      }
      break;
 8004d4c:	e006      	b.n	8004d5c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f001 f90f 	bl	8005f74 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d56:	2302      	movs	r3, #2
 8004d58:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5a:	bf00      	nop
  }

  return ret;
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d78:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d80:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d037      	beq.n	8004dfc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	331c      	adds	r3, #28
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d026      	beq.n	8004df0 <USBD_CDC_DataIn+0x8a>
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	331c      	adds	r3, #28
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	0152      	lsls	r2, r2, #5
 8004dba:	440a      	add	r2, r1
 8004dbc:	3238      	adds	r2, #56	; 0x38
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dc4:	fb02 f201 	mul.w	r2, r2, r1
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d110      	bne.n	8004df0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	331c      	adds	r3, #28
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004de2:	78f9      	ldrb	r1, [r7, #3]
 8004de4:	2300      	movs	r3, #0
 8004de6:	2200      	movs	r2, #0
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f002 f9b3 	bl	8007154 <USBD_LL_Transmit>
 8004dee:	e003      	b.n	8004df8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f002 f9de 	bl	80071e0 <USBD_LL_GetRxDataSize>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4798      	blx	r3

    return USBD_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004e52:	2302      	movs	r3, #2
  }
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <USBD_CDC_EP0_RxReady+0x46>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e7c:	2bff      	cmp	r3, #255	; 0xff
 8004e7e:	d010      	beq.n	8004ea2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004e8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e96:	b292      	uxth	r2, r2
 8004e98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2243      	movs	r2, #67	; 0x43
 8004eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000090 	.word	0x20000090

08004ecc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2243      	movs	r2, #67	; 0x43
 8004ed8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000004c 	.word	0x2000004c

08004eec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2243      	movs	r2, #67	; 0x43
 8004ef8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004efa:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	200000d4 	.word	0x200000d4

08004f0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	220a      	movs	r2, #10
 8004f18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000008 	.word	0x20000008

08004f2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004f36:	2302      	movs	r3, #2
 8004f38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f9a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7c1b      	ldrb	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fdc:	2101      	movs	r1, #1
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f002 f8db 	bl	800719a <USBD_LL_PrepareReceive>
 8004fe4:	e007      	b.n	8004ff6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	2101      	movs	r1, #1
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f002 f8d2 	bl	800719a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8005018:	4814      	ldr	r0, [pc, #80]	; (800506c <USBD_Init+0x68>)
 800501a:	f002 faa7 	bl	800756c <iprintf>
 800501e:	4814      	ldr	r0, [pc, #80]	; (8005070 <USBD_Init+0x6c>)
 8005020:	f002 faa4 	bl	800756c <iprintf>
 8005024:	200a      	movs	r0, #10
 8005026:	f002 fab9 	bl	800759c <putchar>
#endif
    return USBD_FAIL;
 800502a:	2302      	movs	r3, #2
 800502c:	e01a      	b.n	8005064 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	79fa      	ldrb	r2, [r7, #7]
 800505a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f001 ff3d 	bl	8006edc <USBD_LL_Init>

  return USBD_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08008408 	.word	0x08008408
 8005070:	08008410 	.word	0x08008410

08005074 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d006      	beq.n	8005096 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	e00a      	b.n	80050ac <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8005096:	4808      	ldr	r0, [pc, #32]	; (80050b8 <USBD_RegisterClass+0x44>)
 8005098:	f002 fa68 	bl	800756c <iprintf>
 800509c:	4807      	ldr	r0, [pc, #28]	; (80050bc <USBD_RegisterClass+0x48>)
 800509e:	f002 fa65 	bl	800756c <iprintf>
 80050a2:	200a      	movs	r0, #10
 80050a4:	f002 fa7a 	bl	800759c <putchar>
#endif
    status = USBD_FAIL;
 80050a8:	2302      	movs	r3, #2
 80050aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	08008408 	.word	0x08008408
 80050bc:	08008428 	.word	0x08008428

080050c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 ff61 	bl	8006f90 <USBD_LL_Start>

  return USBD_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80050f8:	2302      	movs	r3, #2
 80050fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00c      	beq.n	8005120 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	4611      	mov	r1, r2
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	4611      	mov	r1, r2
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3

  return USBD_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 feca 	bl	8005efc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2b01      	cmp	r3, #1
 800518a:	d00c      	beq.n	80051a6 <USBD_LL_SetupStage+0x56>
 800518c:	2b01      	cmp	r3, #1
 800518e:	d302      	bcc.n	8005196 <USBD_LL_SetupStage+0x46>
 8005190:	2b02      	cmp	r3, #2
 8005192:	d010      	beq.n	80051b6 <USBD_LL_SetupStage+0x66>
 8005194:	e017      	b.n	80051c6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f9ca 	bl	8005538 <USBD_StdDevReq>
      break;
 80051a4:	e01a      	b.n	80051dc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa2c 	bl	800560c <USBD_StdItfReq>
      break;
 80051b4:	e012      	b.n	80051dc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa6a 	bl	8005698 <USBD_StdEPReq>
      break;
 80051c4:	e00a      	b.n	80051dc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 ff3b 	bl	8007050 <USBD_LL_StallEP>
      break;
 80051da:	bf00      	nop
  }

  return USBD_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	460b      	mov	r3, r1
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80051f4:	7afb      	ldrb	r3, [r7, #11]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d14b      	bne.n	8005292 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005200:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005208:	2b03      	cmp	r3, #3
 800520a:	d134      	bne.n	8005276 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d919      	bls.n	800524c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	1ad2      	subs	r2, r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800522e:	429a      	cmp	r2, r3
 8005230:	d203      	bcs.n	800523a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005236:	b29b      	uxth	r3, r3
 8005238:	e002      	b.n	8005240 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 ff4b 	bl	80060e0 <USBD_CtlContinueRx>
 800524a:	e038      	b.n	80052be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800525e:	2b03      	cmp	r3, #3
 8005260:	d105      	bne.n	800526e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 ff48 	bl	8006104 <USBD_CtlSendStatus>
 8005274:	e023      	b.n	80052be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800527c:	2b05      	cmp	r3, #5
 800527e:	d11e      	bne.n	80052be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005288:	2100      	movs	r1, #0
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f001 fee0 	bl	8007050 <USBD_LL_StallEP>
 8005290:	e015      	b.n	80052be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00d      	beq.n	80052ba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d108      	bne.n	80052ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	7afa      	ldrb	r2, [r7, #11]
 80052b2:	4611      	mov	r1, r2
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	4798      	blx	r3
 80052b8:	e001      	b.n	80052be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80052ba:	2302      	movs	r3, #2
 80052bc:	e000      	b.n	80052c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	460b      	mov	r3, r1
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d17f      	bne.n	80053dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3314      	adds	r3, #20
 80052e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d15c      	bne.n	80053a6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d915      	bls.n	8005324 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 feb5 	bl	8006080 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005316:	2300      	movs	r3, #0
 8005318:	2200      	movs	r2, #0
 800531a:	2100      	movs	r1, #0
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f001 ff3c 	bl	800719a <USBD_LL_PrepareReceive>
 8005322:	e04e      	b.n	80053c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	6912      	ldr	r2, [r2, #16]
 800532c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005330:	fb02 f201 	mul.w	r2, r2, r1
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d11c      	bne.n	8005374 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005342:	429a      	cmp	r2, r3
 8005344:	d316      	bcc.n	8005374 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005350:	429a      	cmp	r2, r3
 8005352:	d20f      	bcs.n	8005374 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005354:	2200      	movs	r2, #0
 8005356:	2100      	movs	r1, #0
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fe91 	bl	8006080 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005366:	2300      	movs	r3, #0
 8005368:	2200      	movs	r2, #0
 800536a:	2100      	movs	r1, #0
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f001 ff14 	bl	800719a <USBD_LL_PrepareReceive>
 8005372:	e026      	b.n	80053c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005386:	2b03      	cmp	r3, #3
 8005388:	d105      	bne.n	8005396 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f001 fe59 	bl	8007050 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fec3 	bl	800612a <USBD_CtlReceiveStatus>
 80053a4:	e00d      	b.n	80053c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d004      	beq.n	80053ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f001 fe47 	bl	8007050 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11d      	bne.n	8005408 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff fe83 	bl	80050d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80053da:	e015      	b.n	8005408 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d108      	bne.n	8005404 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	7afa      	ldrb	r2, [r7, #11]
 80053fc:	4611      	mov	r1, r2
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	4798      	blx	r3
 8005402:	e001      	b.n	8005408 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005404:	2302      	movs	r3, #2
 8005406:	e000      	b.n	800540a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800541a:	2340      	movs	r3, #64	; 0x40
 800541c:	2200      	movs	r2, #0
 800541e:	2100      	movs	r1, #0
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 fdd0 	bl	8006fc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2240      	movs	r2, #64	; 0x40
 8005432:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	2200      	movs	r2, #0
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fdc2 	bl	8006fc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2240      	movs	r2, #64	; 0x40
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	4611      	mov	r1, r2
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
  }

  return USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d105      	bne.n	80054f8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	2b03      	cmp	r3, #3
 8005514:	d10b      	bne.n	800552e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800554e:	2b20      	cmp	r3, #32
 8005550:	d004      	beq.n	800555c <USBD_StdDevReq+0x24>
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d002      	beq.n	800555c <USBD_StdDevReq+0x24>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <USBD_StdDevReq+0x34>
 800555a:	e04c      	b.n	80055f6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3
      break;
 800556a:	e049      	b.n	8005600 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b09      	cmp	r3, #9
 8005572:	d83a      	bhi.n	80055ea <USBD_StdDevReq+0xb2>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <USBD_StdDevReq+0x44>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080055e1 	.word	0x080055e1
 8005584:	080055eb 	.word	0x080055eb
 8005588:	080055d7 	.word	0x080055d7
 800558c:	080055eb 	.word	0x080055eb
 8005590:	080055af 	.word	0x080055af
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055eb 	.word	0x080055eb
 800559c:	080055c3 	.word	0x080055c3
 80055a0:	080055b9 	.word	0x080055b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9d4 	bl	8005954 <USBD_GetDescriptor>
          break;
 80055ac:	e022      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb37 	bl	8005c24 <USBD_SetAddress>
          break;
 80055b6:	e01d      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fb74 	bl	8005ca8 <USBD_SetConfig>
          break;
 80055c0:	e018      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fbfd 	bl	8005dc4 <USBD_GetConfig>
          break;
 80055ca:	e013      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fc2c 	bl	8005e2c <USBD_GetStatus>
          break;
 80055d4:	e00e      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fc5a 	bl	8005e92 <USBD_SetFeature>
          break;
 80055de:	e009      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fc69 	bl	8005eba <USBD_ClrFeature>
          break;
 80055e8:	e004      	b.n	80055f4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fcc1 	bl	8005f74 <USBD_CtlError>
          break;
 80055f2:	bf00      	nop
      }
      break;
 80055f4:	e004      	b.n	8005600 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fcbb 	bl	8005f74 <USBD_CtlError>
      break;
 80055fe:	bf00      	nop
  }

  return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop

0800560c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005622:	2b20      	cmp	r3, #32
 8005624:	d003      	beq.n	800562e <USBD_StdItfReq+0x22>
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d001      	beq.n	800562e <USBD_StdItfReq+0x22>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d12a      	bne.n	8005684 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005634:	3b01      	subs	r3, #1
 8005636:	2b02      	cmp	r3, #2
 8005638:	d81d      	bhi.n	8005676 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	889b      	ldrh	r3, [r3, #4]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d813      	bhi.n	800566c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	88db      	ldrh	r3, [r3, #6]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d110      	bne.n	8005680 <USBD_StdItfReq+0x74>
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10d      	bne.n	8005680 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fd4d 	bl	8006104 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800566a:	e009      	b.n	8005680 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fc80 	bl	8005f74 <USBD_CtlError>
          break;
 8005674:	e004      	b.n	8005680 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc7b 	bl	8005f74 <USBD_CtlError>
          break;
 800567e:	e000      	b.n	8005682 <USBD_StdItfReq+0x76>
          break;
 8005680:	bf00      	nop
      }
      break;
 8005682:	e004      	b.n	800568e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fc74 	bl	8005f74 <USBD_CtlError>
      break;
 800568c:	bf00      	nop
  }

  return USBD_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	889b      	ldrh	r3, [r3, #4]
 80056aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d004      	beq.n	80056c2 <USBD_StdEPReq+0x2a>
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d002      	beq.n	80056c2 <USBD_StdEPReq+0x2a>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <USBD_StdEPReq+0x3a>
 80056c0:	e13d      	b.n	800593e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
      break;
 80056d0:	e13a      	b.n	8005948 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d10a      	bne.n	80056f4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]

        return ret;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	e12a      	b.n	800594a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d03e      	beq.n	800577a <USBD_StdEPReq+0xe2>
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d002      	beq.n	8005706 <USBD_StdEPReq+0x6e>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d070      	beq.n	80057e6 <USBD_StdEPReq+0x14e>
 8005704:	e115      	b.n	8005932 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570c:	2b02      	cmp	r3, #2
 800570e:	d002      	beq.n	8005716 <USBD_StdEPReq+0x7e>
 8005710:	2b03      	cmp	r3, #3
 8005712:	d015      	beq.n	8005740 <USBD_StdEPReq+0xa8>
 8005714:	e02b      	b.n	800576e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <USBD_StdEPReq+0x9e>
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d009      	beq.n	8005736 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005722:	7bbb      	ldrb	r3, [r7, #14]
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fc92 	bl	8007050 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fc8e 	bl	8007050 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005734:	e020      	b.n	8005778 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fc1b 	bl	8005f74 <USBD_CtlError>
              break;
 800573e:	e01b      	b.n	8005778 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	885b      	ldrh	r3, [r3, #2]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <USBD_StdEPReq+0xce>
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d008      	beq.n	8005766 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	88db      	ldrh	r3, [r3, #6]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fc75 	bl	8007050 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fccc 	bl	8006104 <USBD_CtlSendStatus>

              break;
 800576c:	e004      	b.n	8005778 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fbff 	bl	8005f74 <USBD_CtlError>
              break;
 8005776:	bf00      	nop
          }
          break;
 8005778:	e0e0      	b.n	800593c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005780:	2b02      	cmp	r3, #2
 8005782:	d002      	beq.n	800578a <USBD_StdEPReq+0xf2>
 8005784:	2b03      	cmp	r3, #3
 8005786:	d015      	beq.n	80057b4 <USBD_StdEPReq+0x11c>
 8005788:	e026      	b.n	80057d8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <USBD_StdEPReq+0x112>
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d009      	beq.n	80057aa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fc58 	bl	8007050 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 fc54 	bl	8007050 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057a8:	e01c      	b.n	80057e4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fbe1 	bl	8005f74 <USBD_CtlError>
              break;
 80057b2:	e017      	b.n	80057e4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	885b      	ldrh	r3, [r3, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d112      	bne.n	80057e2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fc5f 	bl	800708e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fc97 	bl	8006104 <USBD_CtlSendStatus>
              }
              break;
 80057d6:	e004      	b.n	80057e2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fbca 	bl	8005f74 <USBD_CtlError>
              break;
 80057e0:	e000      	b.n	80057e4 <USBD_StdEPReq+0x14c>
              break;
 80057e2:	bf00      	nop
          }
          break;
 80057e4:	e0aa      	b.n	800593c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d002      	beq.n	80057f6 <USBD_StdEPReq+0x15e>
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d032      	beq.n	800585a <USBD_StdEPReq+0x1c2>
 80057f4:	e097      	b.n	8005926 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <USBD_StdEPReq+0x174>
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d004      	beq.n	800580c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fbb5 	bl	8005f74 <USBD_CtlError>
                break;
 800580a:	e091      	b.n	8005930 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800580c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da0b      	bge.n	800582c <USBD_StdEPReq+0x194>
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	3310      	adds	r3, #16
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	e00b      	b.n	8005844 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	3304      	adds	r3, #4
 8005844:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2202      	movs	r2, #2
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fbf8 	bl	8006048 <USBD_CtlSendData>
              break;
 8005858:	e06a      	b.n	8005930 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800585a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800585e:	2b00      	cmp	r3, #0
 8005860:	da11      	bge.n	8005886 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	3318      	adds	r3, #24
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d117      	bne.n	80058ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fb78 	bl	8005f74 <USBD_CtlError>
                  break;
 8005884:	e054      	b.n	8005930 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fb65 	bl	8005f74 <USBD_CtlError>
                  break;
 80058aa:	e041      	b.n	8005930 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da0b      	bge.n	80058cc <USBD_StdEPReq+0x234>
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3310      	adds	r3, #16
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	4413      	add	r3, r2
 80058c8:	3304      	adds	r3, #4
 80058ca:	e00b      	b.n	80058e4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	3304      	adds	r3, #4
 80058e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <USBD_StdEPReq+0x25a>
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d103      	bne.n	80058fa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e00e      	b.n	8005918 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fbe4 	bl	80070cc <USBD_LL_IsStallEP>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e002      	b.n	8005918 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2202      	movs	r2, #2
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fb92 	bl	8006048 <USBD_CtlSendData>
              break;
 8005924:	e004      	b.n	8005930 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fb23 	bl	8005f74 <USBD_CtlError>
              break;
 800592e:	bf00      	nop
          }
          break;
 8005930:	e004      	b.n	800593c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fb1d 	bl	8005f74 <USBD_CtlError>
          break;
 800593a:	bf00      	nop
      }
      break;
 800593c:	e004      	b.n	8005948 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fb17 	bl	8005f74 <USBD_CtlError>
      break;
 8005946:	bf00      	nop
  }

  return ret;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	885b      	ldrh	r3, [r3, #2]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	2b06      	cmp	r3, #6
 8005976:	f200 8128 	bhi.w	8005bca <USBD_GetDescriptor+0x276>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <USBD_GetDescriptor+0x2c>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	0800599d 	.word	0x0800599d
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059f5 	.word	0x080059f5
 800598c:	08005bcb 	.word	0x08005bcb
 8005990:	08005bcb 	.word	0x08005bcb
 8005994:	08005b6b 	.word	0x08005b6b
 8005998:	08005b97 	.word	0x08005b97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	7c12      	ldrb	r2, [r2, #16]
 80059a8:	f107 0108 	add.w	r1, r7, #8
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
 80059b0:	60f8      	str	r0, [r7, #12]
      break;
 80059b2:	e112      	b.n	8005bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7c1b      	ldrb	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10d      	bne.n	80059d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f107 0208 	add.w	r2, r7, #8
 80059c8:	4610      	mov	r0, r2
 80059ca:	4798      	blx	r3
 80059cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059d6:	e100      	b.n	8005bda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	f107 0208 	add.w	r2, r7, #8
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
 80059e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	2202      	movs	r2, #2
 80059f0:	701a      	strb	r2, [r3, #0]
      break;
 80059f2:	e0f2      	b.n	8005bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	885b      	ldrh	r3, [r3, #2]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	f200 80ac 	bhi.w	8005b58 <USBD_GetDescriptor+0x204>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <USBD_GetDescriptor+0xb4>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a55 	.word	0x08005a55
 8005a10:	08005a89 	.word	0x08005a89
 8005a14:	08005abd 	.word	0x08005abd
 8005a18:	08005af1 	.word	0x08005af1
 8005a1c:	08005b25 	.word	0x08005b25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	7c12      	ldrb	r2, [r2, #16]
 8005a38:	f107 0108 	add.w	r1, r7, #8
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4798      	blx	r3
 8005a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a42:	e091      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa94 	bl	8005f74 <USBD_CtlError>
            err++;
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	72fb      	strb	r3, [r7, #11]
          break;
 8005a52:	e089      	b.n	8005b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	7c12      	ldrb	r2, [r2, #16]
 8005a6c:	f107 0108 	add.w	r1, r7, #8
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
 8005a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a76:	e077      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa7a 	bl	8005f74 <USBD_CtlError>
            err++;
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	3301      	adds	r3, #1
 8005a84:	72fb      	strb	r3, [r7, #11]
          break;
 8005a86:	e06f      	b.n	8005b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	7c12      	ldrb	r2, [r2, #16]
 8005aa0:	f107 0108 	add.w	r1, r7, #8
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aaa:	e05d      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa60 	bl	8005f74 <USBD_CtlError>
            err++;
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aba:	e055      	b.n	8005b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	7c12      	ldrb	r2, [r2, #16]
 8005ad4:	f107 0108 	add.w	r1, r7, #8
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ade:	e043      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa46 	bl	8005f74 <USBD_CtlError>
            err++;
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	3301      	adds	r3, #1
 8005aec:	72fb      	strb	r3, [r7, #11]
          break;
 8005aee:	e03b      	b.n	8005b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	7c12      	ldrb	r2, [r2, #16]
 8005b08:	f107 0108 	add.w	r1, r7, #8
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b12:	e029      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa2c 	bl	8005f74 <USBD_CtlError>
            err++;
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	72fb      	strb	r3, [r7, #11]
          break;
 8005b22:	e021      	b.n	8005b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	7c12      	ldrb	r2, [r2, #16]
 8005b3c:	f107 0108 	add.w	r1, r7, #8
 8005b40:	4610      	mov	r0, r2
 8005b42:	4798      	blx	r3
 8005b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b46:	e00f      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa12 	bl	8005f74 <USBD_CtlError>
            err++;
 8005b50:	7afb      	ldrb	r3, [r7, #11]
 8005b52:	3301      	adds	r3, #1
 8005b54:	72fb      	strb	r3, [r7, #11]
          break;
 8005b56:	e007      	b.n	8005b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa0a 	bl	8005f74 <USBD_CtlError>
          err++;
 8005b60:	7afb      	ldrb	r3, [r7, #11]
 8005b62:	3301      	adds	r3, #1
 8005b64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005b66:	e038      	b.n	8005bda <USBD_GetDescriptor+0x286>
 8005b68:	e037      	b.n	8005bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	7c1b      	ldrb	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	f107 0208 	add.w	r2, r7, #8
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4798      	blx	r3
 8005b82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b84:	e029      	b.n	8005bda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f9f3 	bl	8005f74 <USBD_CtlError>
        err++;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	3301      	adds	r3, #1
 8005b92:	72fb      	strb	r3, [r7, #11]
      break;
 8005b94:	e021      	b.n	8005bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	7c1b      	ldrb	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f107 0208 	add.w	r2, r7, #8
 8005baa:	4610      	mov	r0, r2
 8005bac:	4798      	blx	r3
 8005bae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bb8:	e00f      	b.n	8005bda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f9d9 	bl	8005f74 <USBD_CtlError>
        err++;
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8005bc8:	e007      	b.n	8005bda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f9d1 	bl	8005f74 <USBD_CtlError>
      err++;
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8005bd8:	bf00      	nop
  }

  if (err != 0U)
 8005bda:	7afb      	ldrb	r3, [r7, #11]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11c      	bne.n	8005c1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d011      	beq.n	8005c0a <USBD_GetDescriptor+0x2b6>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00d      	beq.n	8005c0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	88da      	ldrh	r2, [r3, #6]
 8005bf2:	893b      	ldrh	r3, [r7, #8]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bf28      	it	cs
 8005bf8:	4613      	movcs	r3, r2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bfe:	893b      	ldrh	r3, [r7, #8]
 8005c00:	461a      	mov	r2, r3
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa1f 	bl	8006048 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	88db      	ldrh	r3, [r3, #6]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa76 	bl	8006104 <USBD_CtlSendStatus>
 8005c18:	e000      	b.n	8005c1c <USBD_GetDescriptor+0x2c8>
    return;
 8005c1a:	bf00      	nop
    }
  }
}
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	889b      	ldrh	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d130      	bne.n	8005c98 <USBD_SetAddress+0x74>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12c      	bne.n	8005c98 <USBD_SetAddress+0x74>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	885b      	ldrh	r3, [r3, #2]
 8005c42:	2b7f      	cmp	r3, #127	; 0x7f
 8005c44:	d828      	bhi.n	8005c98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	885b      	ldrh	r3, [r3, #2]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d104      	bne.n	8005c66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f988 	bl	8005f74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c64:	e01c      	b.n	8005ca0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fa4f 	bl	8007116 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa43 	bl	8006104 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8c:	e008      	b.n	8005ca0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	e003      	b.n	8005ca0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f96a 	bl	8005f74 <USBD_CtlError>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	885b      	ldrh	r3, [r3, #2]
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005cba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cbc:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d904      	bls.n	8005cce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f954 	bl	8005f74 <USBD_CtlError>
 8005ccc:	e075      	b.n	8005dba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d002      	beq.n	8005cde <USBD_SetConfig+0x36>
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d023      	beq.n	8005d24 <USBD_SetConfig+0x7c>
 8005cdc:	e062      	b.n	8005da4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005cde:	4b38      	ldr	r3, [pc, #224]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01a      	beq.n	8005d1c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005ce6:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cf8:	4b31      	ldr	r3, [pc, #196]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff f9f4 	bl	80050ec <USBD_SetClassConfig>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d104      	bne.n	8005d14 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f931 	bl	8005f74 <USBD_CtlError>
            return;
 8005d12:	e052      	b.n	8005dba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9f5 	bl	8006104 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d1a:	e04e      	b.n	8005dba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9f1 	bl	8006104 <USBD_CtlSendStatus>
        break;
 8005d22:	e04a      	b.n	8005dba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d112      	bne.n	8005d52 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005d34:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005d3e:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f9f0 	bl	800512a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9da 	bl	8006104 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d50:	e033      	b.n	8005dba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d01d      	beq.n	8005d9c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff f9de 	bl	800512a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d78:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff f9b4 	bl	80050ec <USBD_SetClassConfig>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d104      	bne.n	8005d94 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8f1 	bl	8005f74 <USBD_CtlError>
            return;
 8005d92:	e012      	b.n	8005dba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f9b5 	bl	8006104 <USBD_CtlSendStatus>
        break;
 8005d9a:	e00e      	b.n	8005dba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f9b1 	bl	8006104 <USBD_CtlSendStatus>
        break;
 8005da2:	e00a      	b.n	8005dba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8e4 	bl	8005f74 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <USBD_SetConfig+0x118>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff f9b9 	bl	800512a <USBD_ClrClassConfig>
        break;
 8005db8:	bf00      	nop
    }
  }
}
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	200001fc 	.word	0x200001fc

08005dc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	88db      	ldrh	r3, [r3, #6]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d004      	beq.n	8005de0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f8cb 	bl	8005f74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005dde:	e021      	b.n	8005e24 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	db17      	blt.n	8005e1a <USBD_GetConfig+0x56>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	dd02      	ble.n	8005df4 <USBD_GetConfig+0x30>
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d00b      	beq.n	8005e0a <USBD_GetConfig+0x46>
 8005df2:	e012      	b.n	8005e1a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f920 	bl	8006048 <USBD_CtlSendData>
        break;
 8005e08:	e00c      	b.n	8005e24 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f918 	bl	8006048 <USBD_CtlSendData>
        break;
 8005e18:	e004      	b.n	8005e24 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f8a9 	bl	8005f74 <USBD_CtlError>
        break;
 8005e22:	bf00      	nop
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d81e      	bhi.n	8005e80 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	88db      	ldrh	r3, [r3, #6]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d004      	beq.n	8005e54 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f891 	bl	8005f74 <USBD_CtlError>
        break;
 8005e52:	e01a      	b.n	8005e8a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f043 0202 	orr.w	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	330c      	adds	r3, #12
 8005e74:	2202      	movs	r2, #2
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8e5 	bl	8006048 <USBD_CtlSendData>
      break;
 8005e7e:	e004      	b.n	8005e8a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f876 	bl	8005f74 <USBD_CtlError>
      break;
 8005e88:	bf00      	nop
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	885b      	ldrh	r3, [r3, #2]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d106      	bne.n	8005eb2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f929 	bl	8006104 <USBD_CtlSendStatus>
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d80b      	bhi.n	8005ee8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	885b      	ldrh	r3, [r3, #2]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10c      	bne.n	8005ef2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f90f 	bl	8006104 <USBD_CtlSendStatus>
      }
      break;
 8005ee6:	e004      	b.n	8005ef2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f842 	bl	8005f74 <USBD_CtlError>
      break;
 8005ef0:	e000      	b.n	8005ef4 <USBD_ClrFeature+0x3a>
      break;
 8005ef2:	bf00      	nop
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	785a      	ldrb	r2, [r3, #1]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	3302      	adds	r3, #2
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	3303      	adds	r3, #3
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	3304      	adds	r3, #4
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	3305      	adds	r3, #5
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	3306      	adds	r3, #6
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	3307      	adds	r3, #7
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	80da      	strh	r2, [r3, #6]

}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 f865 	bl	8007050 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f86:	2100      	movs	r1, #0
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f861 	bl	8007050 <USBD_LL_StallEP>
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d032      	beq.n	8006012 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f834 	bl	800601a <USBD_GetLen>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	75fa      	strb	r2, [r7, #23]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4413      	add	r3, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	75fa      	strb	r2, [r7, #23]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	2203      	movs	r2, #3
 8005fe0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005fe2:	e012      	b.n	800600a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	60fa      	str	r2, [r7, #12]
 8005fea:	7dfa      	ldrb	r2, [r7, #23]
 8005fec:	1c51      	adds	r1, r2, #1
 8005fee:	75f9      	strb	r1, [r7, #23]
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	75fa      	strb	r2, [r7, #23]
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4413      	add	r3, r2
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e8      	bne.n	8005fe4 <USBD_GetString+0x4e>
    }
  }
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006026:	e005      	b.n	8006034 <USBD_GetLen+0x1a>
  {
    len++;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	3301      	adds	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3301      	adds	r3, #1
 8006032:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f5      	bne.n	8006028 <USBD_GetLen+0xe>
  }

  return len;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2202      	movs	r2, #2
 800605a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	2100      	movs	r1, #0
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f001 f86f 	bl	8007154 <USBD_LL_Transmit>

  return USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	2100      	movs	r1, #0
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 f85d 	bl	8007154 <USBD_LL_Transmit>

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2203      	movs	r2, #3
 80060b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	2100      	movs	r1, #0
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f001 f862 	bl	800719a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	2100      	movs	r1, #0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 f850 	bl	800719a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2204      	movs	r2, #4
 8006110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006114:	2300      	movs	r3, #0
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 f81a 	bl	8007154 <USBD_LL_Transmit>

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2205      	movs	r2, #5
 8006136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800613a:	2300      	movs	r3, #0
 800613c:	2200      	movs	r2, #0
 800613e:	2100      	movs	r1, #0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 f82a 	bl	800719a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006160:	4b58      	ldr	r3, [pc, #352]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006162:	4a59      	ldr	r2, [pc, #356]	; (80062c8 <MX_ADC1_Init+0x178>)
 8006164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006166:	4b57      	ldr	r3, [pc, #348]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800616c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800616e:	4b55      	ldr	r3, [pc, #340]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006170:	2201      	movs	r2, #1
 8006172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006174:	4b53      	ldr	r3, [pc, #332]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006176:	2200      	movs	r2, #0
 8006178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800617a:	4b52      	ldr	r3, [pc, #328]	; (80062c4 <MX_ADC1_Init+0x174>)
 800617c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8006180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006182:	4b50      	ldr	r3, [pc, #320]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8006188:	4b4e      	ldr	r3, [pc, #312]	; (80062c4 <MX_ADC1_Init+0x174>)
 800618a:	220a      	movs	r2, #10
 800618c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800618e:	484d      	ldr	r0, [pc, #308]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006190:	f7fa f830 	bl	80001f4 <HAL_ADC_Init>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800619a:	f000 fa7f 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80061a2:	2301      	movs	r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4845      	ldr	r0, [pc, #276]	; (80062c4 <MX_ADC1_Init+0x174>)
 80061b0:	f7fa fb74 	bl	800089c <HAL_ADC_ConfigChannel>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80061ba:	f000 fa6f 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80061be:	2301      	movs	r3, #1
 80061c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80061c2:	2302      	movs	r3, #2
 80061c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	483e      	ldr	r0, [pc, #248]	; (80062c4 <MX_ADC1_Init+0x174>)
 80061cc:	f7fa fb66 	bl	800089c <HAL_ADC_ConfigChannel>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80061d6:	f000 fa61 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80061da:	2302      	movs	r3, #2
 80061dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80061de:	2303      	movs	r3, #3
 80061e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4837      	ldr	r0, [pc, #220]	; (80062c4 <MX_ADC1_Init+0x174>)
 80061e8:	f7fa fb58 	bl	800089c <HAL_ADC_ConfigChannel>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80061f2:	f000 fa53 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80061f6:	2303      	movs	r3, #3
 80061f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80061fa:	2304      	movs	r3, #4
 80061fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4830      	ldr	r0, [pc, #192]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006204:	f7fa fb4a 	bl	800089c <HAL_ADC_ConfigChannel>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800620e:	f000 fa45 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006212:	2304      	movs	r3, #4
 8006214:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006216:	2305      	movs	r3, #5
 8006218:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4829      	ldr	r0, [pc, #164]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006220:	f7fa fb3c 	bl	800089c <HAL_ADC_ConfigChannel>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800622a:	f000 fa37 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800622e:	2305      	movs	r3, #5
 8006230:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006232:	2306      	movs	r3, #6
 8006234:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4822      	ldr	r0, [pc, #136]	; (80062c4 <MX_ADC1_Init+0x174>)
 800623c:	f7fa fb2e 	bl	800089c <HAL_ADC_ConfigChannel>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8006246:	f000 fa29 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800624a:	2306      	movs	r3, #6
 800624c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800624e:	2307      	movs	r3, #7
 8006250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	4619      	mov	r1, r3
 8006256:	481b      	ldr	r0, [pc, #108]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006258:	f7fa fb20 	bl	800089c <HAL_ADC_ConfigChannel>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8006262:	f000 fa1b 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006266:	2307      	movs	r3, #7
 8006268:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800626a:	2308      	movs	r3, #8
 800626c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4814      	ldr	r0, [pc, #80]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006274:	f7fa fb12 	bl	800089c <HAL_ADC_ConfigChannel>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800627e:	f000 fa0d 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006282:	2308      	movs	r3, #8
 8006284:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8006286:	2309      	movs	r3, #9
 8006288:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4619      	mov	r1, r3
 800628e:	480d      	ldr	r0, [pc, #52]	; (80062c4 <MX_ADC1_Init+0x174>)
 8006290:	f7fa fb04 	bl	800089c <HAL_ADC_ConfigChannel>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800629a:	f000 f9ff 	bl	800669c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800629e:	2309      	movs	r3, #9
 80062a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80062a2:	230a      	movs	r3, #10
 80062a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4806      	ldr	r0, [pc, #24]	; (80062c4 <MX_ADC1_Init+0x174>)
 80062ac:	f7fa faf6 	bl	800089c <HAL_ADC_ConfigChannel>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80062b6:	f000 f9f1 	bl	800669c <Error_Handler>
  }

}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000460 	.word	0x20000460
 80062c8:	40012400 	.word	0x40012400

080062cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d4:	f107 0318 	add.w	r3, r7, #24
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	609a      	str	r2, [r3, #8]
 80062e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a38      	ldr	r2, [pc, #224]	; (80063c8 <HAL_ADC_MspInit+0xfc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d168      	bne.n	80063be <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80062ec:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_ADC_MspInit+0x100>)
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	4a36      	ldr	r2, [pc, #216]	; (80063cc <HAL_ADC_MspInit+0x100>)
 80062f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062f6:	6193      	str	r3, [r2, #24]
 80062f8:	4b34      	ldr	r3, [pc, #208]	; (80063cc <HAL_ADC_MspInit+0x100>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006304:	4b31      	ldr	r3, [pc, #196]	; (80063cc <HAL_ADC_MspInit+0x100>)
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	4a30      	ldr	r2, [pc, #192]	; (80063cc <HAL_ADC_MspInit+0x100>)
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	6193      	str	r3, [r2, #24]
 8006310:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <HAL_ADC_MspInit+0x100>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <HAL_ADC_MspInit+0x100>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	4a2a      	ldr	r2, [pc, #168]	; (80063cc <HAL_ADC_MspInit+0x100>)
 8006322:	f043 0308 	orr.w	r3, r3, #8
 8006326:	6193      	str	r3, [r2, #24]
 8006328:	4b28      	ldr	r3, [pc, #160]	; (80063cc <HAL_ADC_MspInit+0x100>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006334:	23ff      	movs	r3, #255	; 0xff
 8006336:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006338:	2303      	movs	r3, #3
 800633a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800633c:	f107 0318 	add.w	r3, r7, #24
 8006340:	4619      	mov	r1, r3
 8006342:	4823      	ldr	r0, [pc, #140]	; (80063d0 <HAL_ADC_MspInit+0x104>)
 8006344:	f7fa ff6c 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006348:	2303      	movs	r3, #3
 800634a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800634c:	2303      	movs	r3, #3
 800634e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006350:	f107 0318 	add.w	r3, r7, #24
 8006354:	4619      	mov	r1, r3
 8006356:	481f      	ldr	r0, [pc, #124]	; (80063d4 <HAL_ADC_MspInit+0x108>)
 8006358:	f7fa ff62 	bl	8001220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800635c:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 800635e:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <HAL_ADC_MspInit+0x110>)
 8006360:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006362:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 8006364:	2200      	movs	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006368:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800636e:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 8006370:	2280      	movs	r2, #128	; 0x80
 8006372:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006374:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 8006376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800637c:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 800637e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006382:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 8006386:	2220      	movs	r2, #32
 8006388:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 800638c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006390:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006392:	4811      	ldr	r0, [pc, #68]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 8006394:	f7fa fd56 	bl	8000e44 <HAL_DMA_Init>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 800639e:	f000 f97d 	bl	800669c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 80063a6:	621a      	str	r2, [r3, #32]
 80063a8:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <HAL_ADC_MspInit+0x10c>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80063ae:	2200      	movs	r2, #0
 80063b0:	2100      	movs	r1, #0
 80063b2:	2012      	movs	r0, #18
 80063b4:	f7fa fd1b 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80063b8:	2012      	movs	r0, #18
 80063ba:	f7fa fd34 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80063be:	bf00      	nop
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40012400 	.word	0x40012400
 80063cc:	40021000 	.word	0x40021000
 80063d0:	40010800 	.word	0x40010800
 80063d4:	40010c00 	.word	0x40010c00
 80063d8:	20000490 	.word	0x20000490
 80063dc:	40020008 	.word	0x40020008

080063e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <MX_DMA_Init+0x38>)
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	4a0b      	ldr	r2, [pc, #44]	; (8006418 <MX_DMA_Init+0x38>)
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6153      	str	r3, [r2, #20]
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <MX_DMA_Init+0x38>)
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80063fe:	2200      	movs	r2, #0
 8006400:	2100      	movs	r1, #0
 8006402:	200b      	movs	r0, #11
 8006404:	f7fa fcf3 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006408:	200b      	movs	r0, #11
 800640a:	f7fa fd0c 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000

0800641c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006422:	f107 0310 	add.w	r3, r7, #16
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	605a      	str	r2, [r3, #4]
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006430:	4b2e      	ldr	r3, [pc, #184]	; (80064ec <MX_GPIO_Init+0xd0>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	4a2d      	ldr	r2, [pc, #180]	; (80064ec <MX_GPIO_Init+0xd0>)
 8006436:	f043 0310 	orr.w	r3, r3, #16
 800643a:	6193      	str	r3, [r2, #24]
 800643c:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <MX_GPIO_Init+0xd0>)
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <MX_GPIO_Init+0xd0>)
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	4a27      	ldr	r2, [pc, #156]	; (80064ec <MX_GPIO_Init+0xd0>)
 800644e:	f043 0320 	orr.w	r3, r3, #32
 8006452:	6193      	str	r3, [r2, #24]
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <MX_GPIO_Init+0xd0>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006460:	4b22      	ldr	r3, [pc, #136]	; (80064ec <MX_GPIO_Init+0xd0>)
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4a21      	ldr	r2, [pc, #132]	; (80064ec <MX_GPIO_Init+0xd0>)
 8006466:	f043 0304 	orr.w	r3, r3, #4
 800646a:	6193      	str	r3, [r2, #24]
 800646c:	4b1f      	ldr	r3, [pc, #124]	; (80064ec <MX_GPIO_Init+0xd0>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	607b      	str	r3, [r7, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006478:	4b1c      	ldr	r3, [pc, #112]	; (80064ec <MX_GPIO_Init+0xd0>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <MX_GPIO_Init+0xd0>)
 800647e:	f043 0308 	orr.w	r3, r3, #8
 8006482:	6193      	str	r3, [r2, #24]
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <MX_GPIO_Init+0xd0>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	603b      	str	r3, [r7, #0]
 800648e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006490:	2200      	movs	r2, #0
 8006492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006496:	4816      	ldr	r0, [pc, #88]	; (80064f0 <MX_GPIO_Init+0xd4>)
 8006498:	f7fb f81c 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, saida_4_Pin|saida_3_Pin|saida_2_Pin|saida_1_Pin, GPIO_PIN_RESET);
 800649c:	2200      	movs	r2, #0
 800649e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80064a2:	4814      	ldr	r0, [pc, #80]	; (80064f4 <MX_GPIO_Init+0xd8>)
 80064a4:	f7fb f816 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80064a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ae:	2301      	movs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b6:	2302      	movs	r3, #2
 80064b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80064ba:	f107 0310 	add.w	r3, r7, #16
 80064be:	4619      	mov	r1, r3
 80064c0:	480b      	ldr	r0, [pc, #44]	; (80064f0 <MX_GPIO_Init+0xd4>)
 80064c2:	f7fa fead 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = saida_4_Pin|saida_3_Pin|saida_2_Pin|saida_1_Pin;
 80064c6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80064ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064cc:	2301      	movs	r3, #1
 80064ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064d4:	2302      	movs	r3, #2
 80064d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	4619      	mov	r1, r3
 80064de:	4805      	ldr	r0, [pc, #20]	; (80064f4 <MX_GPIO_Init+0xd8>)
 80064e0:	f7fa fe9e 	bl	8001220 <HAL_GPIO_Init>

}
 80064e4:	bf00      	nop
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40011000 	.word	0x40011000
 80064f4:	40010c00 	.word	0x40010c00

080064f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t i = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006502:	f7f9 fe23 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006506:	f000 f847 	bl	8006598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800650a:	f7ff ff87 	bl	800641c <MX_GPIO_Init>
  MX_DMA_Init();
 800650e:	f7ff ff67 	bl	80063e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8006512:	f7ff fe1d 	bl	8006150 <MX_ADC1_Init>
  MX_TIM2_Init();
 8006516:	f000 fa81 	bl	8006a1c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800651a:	f000 fb65 	bl	8006be8 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800651e:	f000 faed 	bl	8006afc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADCValue, 10);
 8006522:	220a      	movs	r2, #10
 8006524:	4918      	ldr	r1, [pc, #96]	; (8006588 <main+0x90>)
 8006526:	4819      	ldr	r0, [pc, #100]	; (800658c <main+0x94>)
 8006528:	f7f9 fff2 	bl	8000510 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 800652c:	4817      	ldr	r0, [pc, #92]	; (800658c <main+0x94>)
 800652e:	f7f9 ff39 	bl	80003a4 <HAL_ADC_Start_IT>

  uint8_t buff[TAM_BUFFER];
  buff[0] = 0xCC;
 8006532:	23cc      	movs	r3, #204	; 0xcc
 8006534:	713b      	strb	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_adc == 1){
 8006536:	4b16      	ldr	r3, [pc, #88]	; (8006590 <main+0x98>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d1fb      	bne.n	8006536 <main+0x3e>
		  flag_adc = 0;
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <main+0x98>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
		  uint32_t j = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	60bb      	str	r3, [r7, #8]
		  for(i = 1; i < TAM_BUFFER; i+=1){//22
 8006548:	2301      	movs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e010      	b.n	8006570 <main+0x78>
			  //buff[i+1] = (ADCValue[j]>>8);
			  //buff[i] = (ADCValue[j]&0x00FF);
			  buff[i] = (ADCValue[j]>>4);
 800654e:	4a0e      	ldr	r2, [pc, #56]	; (8006588 <main+0x90>)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006556:	091b      	lsrs	r3, r3, #4
 8006558:	b2d9      	uxtb	r1, r3
 800655a:	1d3a      	adds	r2, r7, #4
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	460a      	mov	r2, r1
 8006562:	701a      	strb	r2, [r3, #0]
			  j++;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	3301      	adds	r3, #1
 8006568:	60bb      	str	r3, [r7, #8]
		  for(i = 1; i < TAM_BUFFER; i+=1){//22
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d9eb      	bls.n	800654e <main+0x56>
		  }
		  HAL_UART_Transmit(&huart1,buff,sizeof(buff),1000);
 8006576:	1d39      	adds	r1, r7, #4
 8006578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800657c:	2204      	movs	r2, #4
 800657e:	4805      	ldr	r0, [pc, #20]	; (8006594 <main+0x9c>)
 8006580:	f7fc ff89 	bl	8003496 <HAL_UART_Transmit>
	  if(flag_adc == 1){
 8006584:	e7d7      	b.n	8006536 <main+0x3e>
 8006586:	bf00      	nop
 8006588:	20000200 	.word	0x20000200
 800658c:	20000460 	.word	0x20000460
 8006590:	20000228 	.word	0x20000228
 8006594:	20000554 	.word	0x20000554

08006598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b094      	sub	sp, #80	; 0x50
 800659c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800659e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065a2:	2228      	movs	r2, #40	; 0x28
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 ffd8 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	60da      	str	r2, [r3, #12]
 80065ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	605a      	str	r2, [r3, #4]
 80065c4:	609a      	str	r2, [r3, #8]
 80065c6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80065cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80065d2:	2300      	movs	r3, #0
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80065d6:	2301      	movs	r3, #1
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80065da:	2302      	movs	r3, #2
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80065de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80065e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80065e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80065ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fb fe82 	bl	80022f8 <HAL_RCC_OscConfig>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80065fa:	f000 f84f 	bl	800669c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80065fe:	230f      	movs	r3, #15
 8006600:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006602:	2302      	movs	r3, #2
 8006604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800660a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800660e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8006610:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006614:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006616:	f107 0314 	add.w	r3, r7, #20
 800661a:	2102      	movs	r1, #2
 800661c:	4618      	mov	r0, r3
 800661e:	f7fc f8eb 	bl	80027f8 <HAL_RCC_ClockConfig>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006628:	f000 f838 	bl	800669c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800662c:	2312      	movs	r3, #18
 800662e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7fc faa8 	bl	8002b90 <HAL_RCCEx_PeriphCLKConfig>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006646:	f000 f829 	bl	800669c <Error_Handler>
  }
}
 800664a:	bf00      	nop
 800664c:	3750      	adds	r7, #80	; 0x50
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	volatile static uint32_t contador = 0;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0b      	ldr	r2, [pc, #44]	; (8006690 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006666:	f7f9 fd87 	bl	8000178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  contador++;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	4a08      	ldr	r2, [pc, #32]	; (8006694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006672:	6013      	str	r3, [r2, #0]
  if(contador == 1)//1000
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x34>
  {
	  flag_adc = 1;
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]
	  contador = 0;
 8006682:	4b04      	ldr	r3, [pc, #16]	; (8006694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END Callback 1 */
}
 8006688:	bf00      	nop
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40000800 	.word	0x40000800
 8006694:	2000022c 	.word	0x2000022c
 8006698:	20000228 	.word	0x20000228

0800669c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80066a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066a4:	4804      	ldr	r0, [pc, #16]	; (80066b8 <Error_Handler+0x1c>)
 80066a6:	f7fa ff2d 	bl	8001504 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80066aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ae:	f7f9 fd7f 	bl	80001b0 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40011000 	.word	0x40011000

080066bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <HAL_MspInit+0x5c>)
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	4a14      	ldr	r2, [pc, #80]	; (8006718 <HAL_MspInit+0x5c>)
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	6193      	str	r3, [r2, #24]
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <HAL_MspInit+0x5c>)
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <HAL_MspInit+0x5c>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	4a0e      	ldr	r2, [pc, #56]	; (8006718 <HAL_MspInit+0x5c>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	61d3      	str	r3, [r2, #28]
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <HAL_MspInit+0x5c>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <HAL_MspInit+0x60>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	4a04      	ldr	r2, [pc, #16]	; (800671c <HAL_MspInit+0x60>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	40021000 	.word	0x40021000
 800671c:	40010000 	.word	0x40010000

08006720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08c      	sub	sp, #48	; 0x30
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8006730:	2200      	movs	r2, #0
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	201e      	movs	r0, #30
 8006736:	f7fa fb5a 	bl	8000dee <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800673a:	201e      	movs	r0, #30
 800673c:	f7fa fb73 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006740:	4b1f      	ldr	r3, [pc, #124]	; (80067c0 <HAL_InitTick+0xa0>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <HAL_InitTick+0xa0>)
 8006746:	f043 0304 	orr.w	r3, r3, #4
 800674a:	61d3      	str	r3, [r2, #28]
 800674c:	4b1c      	ldr	r3, [pc, #112]	; (80067c0 <HAL_InitTick+0xa0>)
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006758:	f107 0210 	add.w	r2, r7, #16
 800675c:	f107 0314 	add.w	r3, r7, #20
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f7fc f9c6 	bl	8002af4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006768:	f7fc f99c 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 800676c:	4603      	mov	r3, r0
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <HAL_InitTick+0xa4>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	0c9b      	lsrs	r3, r3, #18
 800677c:	3b01      	subs	r3, #1
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_InitTick+0xa8>)
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <HAL_InitTick+0xac>)
 8006784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8006786:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <HAL_InitTick+0xa8>)
 8006788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800678c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800678e:	4a0e      	ldr	r2, [pc, #56]	; (80067c8 <HAL_InitTick+0xa8>)
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <HAL_InitTick+0xa8>)
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800679a:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <HAL_InitTick+0xa8>)
 800679c:	2200      	movs	r2, #0
 800679e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80067a0:	4809      	ldr	r0, [pc, #36]	; (80067c8 <HAL_InitTick+0xa8>)
 80067a2:	f7fc faab 	bl	8002cfc <HAL_TIM_Base_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80067ac:	4806      	ldr	r0, [pc, #24]	; (80067c8 <HAL_InitTick+0xa8>)
 80067ae:	f7fc fad0 	bl	8002d52 <HAL_TIM_Base_Start_IT>
 80067b2:	4603      	mov	r3, r0
 80067b4:	e000      	b.n	80067b8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	; 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40021000 	.word	0x40021000
 80067c4:	431bde83 	.word	0x431bde83
 80067c8:	200004d4 	.word	0x200004d4
 80067cc:	40000800 	.word	0x40000800

080067d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067e0:	e7fe      	b.n	80067e0 <HardFault_Handler+0x4>

080067e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067e2:	b480      	push	{r7}
 80067e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067e6:	e7fe      	b.n	80067e6 <MemManage_Handler+0x4>

080067e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067ec:	e7fe      	b.n	80067ec <BusFault_Handler+0x4>

080067ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067ee:	b480      	push	{r7}
 80067f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067f2:	e7fe      	b.n	80067f2 <UsageFault_Handler+0x4>

080067f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006810:	bf00      	nop
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800681c:	bf00      	nop
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006828:	4802      	ldr	r0, [pc, #8]	; (8006834 <DMA1_Channel1_IRQHandler+0x10>)
 800682a:	f7fa fbc5 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800682e:	bf00      	nop
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000490 	.word	0x20000490

08006838 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800683c:	4802      	ldr	r0, [pc, #8]	; (8006848 <ADC1_2_IRQHandler+0x10>)
 800683e:	f7f9 ff45 	bl	80006cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000460 	.word	0x20000460

0800684c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006850:	4802      	ldr	r0, [pc, #8]	; (800685c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006852:	f7fa ff76 	bl	8001742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20001028 	.word	0x20001028

08006860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006864:	4802      	ldr	r0, [pc, #8]	; (8006870 <TIM2_IRQHandler+0x10>)
 8006866:	f7fc fa97 	bl	8002d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000514 	.word	0x20000514

08006874 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <TIM4_IRQHandler+0x10>)
 800687a:	f7fc fa8d 	bl	8002d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200004d4 	.word	0x200004d4

08006888 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	e00a      	b.n	80068b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800689a:	f3af 8000 	nop.w
 800689e:	4601      	mov	r1, r0
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	60ba      	str	r2, [r7, #8]
 80068a6:	b2ca      	uxtb	r2, r1
 80068a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	3301      	adds	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	dbf0      	blt.n	800689a <_read+0x12>
	}

return len;
 80068b8:	687b      	ldr	r3, [r7, #4]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	e009      	b.n	80068e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	60ba      	str	r2, [r7, #8]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	3301      	adds	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	dbf1      	blt.n	80068d4 <_write+0x12>
	}
	return len;
 80068f0:	687b      	ldr	r3, [r7, #4]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <_close>:

int _close(int file)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
	return -1;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006920:	605a      	str	r2, [r3, #4]
	return 0;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <_isatty>:

int _isatty(int file)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
	return 1;
 8006936:	2301      	movs	r3, #1
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
	return 0;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
	...

0800695c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006964:	4b11      	ldr	r3, [pc, #68]	; (80069ac <_sbrk+0x50>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d102      	bne.n	8006972 <_sbrk+0x16>
		heap_end = &end;
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <_sbrk+0x50>)
 800696e:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <_sbrk+0x54>)
 8006970:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <_sbrk+0x50>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <_sbrk+0x50>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	466a      	mov	r2, sp
 8006982:	4293      	cmp	r3, r2
 8006984:	d907      	bls.n	8006996 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006986:	f000 fdbf 	bl	8007508 <__errno>
 800698a:	4602      	mov	r2, r0
 800698c:	230c      	movs	r3, #12
 800698e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006994:	e006      	b.n	80069a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <_sbrk+0x50>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	4a03      	ldr	r2, [pc, #12]	; (80069ac <_sbrk+0x50>)
 80069a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000230 	.word	0x20000230
 80069b0:	20001498 	.word	0x20001498

080069b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <SystemInit+0x5c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a14      	ldr	r2, [pc, #80]	; (8006a10 <SystemInit+0x5c>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <SystemInit+0x5c>)
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	4911      	ldr	r1, [pc, #68]	; (8006a10 <SystemInit+0x5c>)
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <SystemInit+0x60>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <SystemInit+0x5c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a0e      	ldr	r2, [pc, #56]	; (8006a10 <SystemInit+0x5c>)
 80069d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80069da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <SystemInit+0x5c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <SystemInit+0x5c>)
 80069e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80069ec:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <SystemInit+0x5c>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <SystemInit+0x5c>)
 80069f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80069f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <SystemInit+0x5c>)
 80069fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80069fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <SystemInit+0x64>)
 8006a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a06:	609a      	str	r2, [r3, #8]
#endif 
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	40021000 	.word	0x40021000
 8006a14:	f8ff0000 	.word	0xf8ff0000
 8006a18:	e000ed00 	.word	0xe000ed00

08006a1c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
 8006a2c:	609a      	str	r2, [r3, #8]
 8006a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a30:	463b      	mov	r3, r7
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006a38:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a42:	f640 620f 	movw	r2, #3599	; 0xe0f
 8006a46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a48:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8006a4e:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a54:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a5a:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a60:	4813      	ldr	r0, [pc, #76]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a62:	f7fc f94b 	bl	8002cfc <HAL_TIM_Base_Init>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006a6c:	f7ff fe16 	bl	800669c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	480c      	ldr	r0, [pc, #48]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a7e:	f7fc fa93 	bl	8002fa8 <HAL_TIM_ConfigClockSource>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006a88:	f7ff fe08 	bl	800669c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a94:	463b      	mov	r3, r7
 8006a96:	4619      	mov	r1, r3
 8006a98:	4805      	ldr	r0, [pc, #20]	; (8006ab0 <MX_TIM2_Init+0x94>)
 8006a9a:	f7fc fc59 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006aa4:	f7ff fdfa 	bl	800669c <Error_Handler>
  }

}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000514 	.word	0x20000514

08006ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d113      	bne.n	8006aee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <HAL_TIM_Base_MspInit+0x44>)
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	4a0b      	ldr	r2, [pc, #44]	; (8006af8 <HAL_TIM_Base_MspInit+0x44>)
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	61d3      	str	r3, [r2, #28]
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <HAL_TIM_Base_MspInit+0x44>)
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	201c      	movs	r0, #28
 8006ae4:	f7fa f983 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ae8:	201c      	movs	r0, #28
 8006aea:	f7fa f99c 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40021000 	.word	0x40021000

08006afc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b02:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <MX_USART1_UART_Init+0x50>)
 8006b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b08:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b22:	220c      	movs	r2, #12
 8006b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b32:	4805      	ldr	r0, [pc, #20]	; (8006b48 <MX_USART1_UART_Init+0x4c>)
 8006b34:	f7fc fc62 	bl	80033fc <HAL_UART_Init>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006b3e:	f7ff fdad 	bl	800669c <Error_Handler>
  }

}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000554 	.word	0x20000554
 8006b4c:	40013800 	.word	0x40013800

08006b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b58:	f107 0310 	add.w	r3, r7, #16
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_UART_MspInit+0x8c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d131      	bne.n	8006bd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7a:	6193      	str	r3, [r2, #24]
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6193      	str	r3, [r2, #24]
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006baa:	2303      	movs	r3, #3
 8006bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	480b      	ldr	r0, [pc, #44]	; (8006be4 <HAL_UART_MspInit+0x94>)
 8006bb6:	f7fa fb33 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4805      	ldr	r0, [pc, #20]	; (8006be4 <HAL_UART_MspInit+0x94>)
 8006bd0:	f7fa fb26 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40013800 	.word	0x40013800
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40010800 	.word	0x40010800

08006be8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bec:	2200      	movs	r2, #0
 8006bee:	4912      	ldr	r1, [pc, #72]	; (8006c38 <MX_USB_DEVICE_Init+0x50>)
 8006bf0:	4812      	ldr	r0, [pc, #72]	; (8006c3c <MX_USB_DEVICE_Init+0x54>)
 8006bf2:	f7fe fa07 	bl	8005004 <USBD_Init>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006bfc:	f7ff fd4e 	bl	800669c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c00:	490f      	ldr	r1, [pc, #60]	; (8006c40 <MX_USB_DEVICE_Init+0x58>)
 8006c02:	480e      	ldr	r0, [pc, #56]	; (8006c3c <MX_USB_DEVICE_Init+0x54>)
 8006c04:	f7fe fa36 	bl	8005074 <USBD_RegisterClass>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c0e:	f7ff fd45 	bl	800669c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c12:	490c      	ldr	r1, [pc, #48]	; (8006c44 <MX_USB_DEVICE_Init+0x5c>)
 8006c14:	4809      	ldr	r0, [pc, #36]	; (8006c3c <MX_USB_DEVICE_Init+0x54>)
 8006c16:	f7fe f989 	bl	8004f2c <USBD_CDC_RegisterInterface>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c20:	f7ff fd3c 	bl	800669c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c24:	4805      	ldr	r0, [pc, #20]	; (8006c3c <MX_USB_DEVICE_Init+0x54>)
 8006c26:	f7fe fa4b 	bl	80050c0 <USBD_Start>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c30:	f7ff fd34 	bl	800669c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c34:	bf00      	nop
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	2000012c 	.word	0x2000012c
 8006c3c:	20000594 	.word	0x20000594
 8006c40:	20000014 	.word	0x20000014
 8006c44:	2000011c 	.word	0x2000011c

08006c48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4905      	ldr	r1, [pc, #20]	; (8006c64 <CDC_Init_FS+0x1c>)
 8006c50:	4805      	ldr	r0, [pc, #20]	; (8006c68 <CDC_Init_FS+0x20>)
 8006c52:	f7fe f981 	bl	8004f58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c56:	4905      	ldr	r1, [pc, #20]	; (8006c6c <CDC_Init_FS+0x24>)
 8006c58:	4803      	ldr	r0, [pc, #12]	; (8006c68 <CDC_Init_FS+0x20>)
 8006c5a:	f7fe f996 	bl	8004f8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000c40 	.word	0x20000c40
 8006c68:	20000594 	.word	0x20000594
 8006c6c:	20000858 	.word	0x20000858

08006c70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
	...

08006c80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b23      	cmp	r3, #35	; 0x23
 8006c94:	d84a      	bhi.n	8006d2c <CDC_Control_FS+0xac>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <CDC_Control_FS+0x1c>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006d2d 	.word	0x08006d2d
 8006ca0:	08006d2d 	.word	0x08006d2d
 8006ca4:	08006d2d 	.word	0x08006d2d
 8006ca8:	08006d2d 	.word	0x08006d2d
 8006cac:	08006d2d 	.word	0x08006d2d
 8006cb0:	08006d2d 	.word	0x08006d2d
 8006cb4:	08006d2d 	.word	0x08006d2d
 8006cb8:	08006d2d 	.word	0x08006d2d
 8006cbc:	08006d2d 	.word	0x08006d2d
 8006cc0:	08006d2d 	.word	0x08006d2d
 8006cc4:	08006d2d 	.word	0x08006d2d
 8006cc8:	08006d2d 	.word	0x08006d2d
 8006ccc:	08006d2d 	.word	0x08006d2d
 8006cd0:	08006d2d 	.word	0x08006d2d
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006d2d 	.word	0x08006d2d
 8006ce0:	08006d2d 	.word	0x08006d2d
 8006ce4:	08006d2d 	.word	0x08006d2d
 8006ce8:	08006d2d 	.word	0x08006d2d
 8006cec:	08006d2d 	.word	0x08006d2d
 8006cf0:	08006d2d 	.word	0x08006d2d
 8006cf4:	08006d2d 	.word	0x08006d2d
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d2d 	.word	0x08006d2d
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d2d 	.word	0x08006d2d
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d2d 	.word	0x08006d2d
 8006d18:	08006d2d 	.word	0x08006d2d
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d2d 	.word	0x08006d2d
 8006d24:	08006d2d 	.word	0x08006d2d
 8006d28:	08006d2d 	.word	0x08006d2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d2c:	bf00      	nop
  }

  return (USBD_OK);
 8006d2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop

08006d3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4805      	ldr	r0, [pc, #20]	; (8006d60 <CDC_Receive_FS+0x24>)
 8006d4a:	f7fe f91e 	bl	8004f8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d4e:	4804      	ldr	r0, [pc, #16]	; (8006d60 <CDC_Receive_FS+0x24>)
 8006d50:	f7fe f92e 	bl	8004fb0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000594 	.word	0x20000594

08006d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0d      	ldr	r2, [pc, #52]	; (8006da8 <HAL_PCD_MspInit+0x44>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d113      	bne.n	8006d9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <HAL_PCD_MspInit+0x48>)
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <HAL_PCD_MspInit+0x48>)
 8006d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d80:	61d3      	str	r3, [r2, #28]
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <HAL_PCD_MspInit+0x48>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	2014      	movs	r0, #20
 8006d94:	f7fa f82b 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d98:	2014      	movs	r0, #20
 8006d9a:	f7fa f844 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40005c00 	.word	0x40005c00
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f7fe f9c2 	bl	8005150 <USBD_LL_SetupStage>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	4619      	mov	r1, r3
 8006df8:	f7fe f9f5 	bl	80051e6 <USBD_LL_DataOutStage>
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	015b      	lsls	r3, r3, #5
 8006e1c:	4413      	add	r3, r2
 8006e1e:	333c      	adds	r3, #60	; 0x3c
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7fe fa4f 	bl	80052c8 <USBD_LL_DataInStage>
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe fb5f 	bl	8005504 <USBD_LL_SOF>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d001      	beq.n	8006e66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e62:	f7ff fc1b 	bl	800669c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e6c:	7bfa      	ldrb	r2, [r7, #15]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fb0f 	bl	8005494 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe fac8 	bl	8005412 <USBD_LL_Reset>
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fb09 	bl	80054b2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ea8:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <HAL_PCD_SuspendCallback+0x30>)
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	4a03      	ldr	r2, [pc, #12]	; (8006ebc <HAL_PCD_SuspendCallback+0x30>)
 8006eae:	f043 0306 	orr.w	r3, r3, #6
 8006eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	e000ed00 	.word	0xe000ed00

08006ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fb03 	bl	80054da <USBD_LL_Resume>
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ee4:	4a28      	ldr	r2, [pc, #160]	; (8006f88 <USBD_LL_Init+0xac>)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <USBD_LL_Init+0xac>)
 8006ef0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006ef4:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <USBD_LL_Init+0xac>)
 8006ef6:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <USBD_LL_Init+0xb0>)
 8006ef8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006efa:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <USBD_LL_Init+0xac>)
 8006efc:	2208      	movs	r2, #8
 8006efe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f00:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <USBD_LL_Init+0xac>)
 8006f02:	2202      	movs	r2, #2
 8006f04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <USBD_LL_Init+0xac>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <USBD_LL_Init+0xac>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f12:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <USBD_LL_Init+0xac>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f18:	481b      	ldr	r0, [pc, #108]	; (8006f88 <USBD_LL_Init+0xac>)
 8006f1a:	f7fa fb0b 	bl	8001534 <HAL_PCD_Init>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f24:	f7ff fbba 	bl	800669c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f2e:	2318      	movs	r3, #24
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	f7fb f9a4 	bl	8002280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f3e:	2358      	movs	r3, #88	; 0x58
 8006f40:	2200      	movs	r2, #0
 8006f42:	2180      	movs	r1, #128	; 0x80
 8006f44:	f7fb f99c 	bl	8002280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f4e:	23c0      	movs	r3, #192	; 0xc0
 8006f50:	2200      	movs	r2, #0
 8006f52:	2181      	movs	r1, #129	; 0x81
 8006f54:	f7fb f994 	bl	8002280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f62:	2200      	movs	r2, #0
 8006f64:	2101      	movs	r1, #1
 8006f66:	f7fb f98b 	bl	8002280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f74:	2200      	movs	r2, #0
 8006f76:	2182      	movs	r1, #130	; 0x82
 8006f78:	f7fb f982 	bl	8002280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20001028 	.word	0x20001028
 8006f8c:	40005c00 	.word	0x40005c00

08006f90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fa fba5 	bl	80016f6 <HAL_PCD_Start>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f948 	bl	8007248 <USBD_Get_USB_Status>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	70fb      	strb	r3, [r7, #3]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70bb      	strb	r3, [r7, #2]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fee:	78bb      	ldrb	r3, [r7, #2]
 8006ff0:	883a      	ldrh	r2, [r7, #0]
 8006ff2:	78f9      	ldrb	r1, [r7, #3]
 8006ff4:	f7fa fcd8 	bl	80019a8 <HAL_PCD_EP_Open>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f922 	bl	8007248 <USBD_Get_USB_Status>
 8007004:	4603      	mov	r3, r0
 8007006:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007008:	7bbb      	ldrb	r3, [r7, #14]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	4611      	mov	r1, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f7fa fd19 	bl	8001a68 <HAL_PCD_EP_Close>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f903 	bl	8007248 <USBD_Get_USB_Status>
 8007042:	4603      	mov	r3, r0
 8007044:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007046:	7bbb      	ldrb	r3, [r7, #14]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	4611      	mov	r1, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7fa fdc3 	bl	8001bfa <HAL_PCD_EP_SetStall>
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f8e4 	bl	8007248 <USBD_Get_USB_Status>
 8007080:	4603      	mov	r3, r0
 8007082:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007084:	7bbb      	ldrb	r3, [r7, #14]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fa fdfe 	bl	8001cae <HAL_PCD_EP_ClrStall>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f8c5 	bl	8007248 <USBD_Get_USB_Status>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070de:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80070e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da08      	bge.n	80070fa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	015b      	lsls	r3, r3, #5
 80070f2:	4413      	add	r3, r2
 80070f4:	332a      	adds	r3, #42	; 0x2a
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	e008      	b.n	800710c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	015b      	lsls	r3, r3, #5
 8007104:	4413      	add	r3, r2
 8007106:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800710a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007130:	78fa      	ldrb	r2, [r7, #3]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f7fa fc12 	bl	800195e <HAL_PCD_SetAddress>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 f881 	bl	8007248 <USBD_Get_USB_Status>
 8007146:	4603      	mov	r3, r0
 8007148:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800714a:	7bbb      	ldrb	r3, [r7, #14]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	461a      	mov	r2, r3
 8007160:	460b      	mov	r3, r1
 8007162:	72fb      	strb	r3, [r7, #11]
 8007164:	4613      	mov	r3, r2
 8007166:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007176:	893b      	ldrh	r3, [r7, #8]
 8007178:	7af9      	ldrb	r1, [r7, #11]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	f7fa fd04 	bl	8001b88 <HAL_PCD_EP_Transmit>
 8007180:	4603      	mov	r3, r0
 8007182:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f85e 	bl	8007248 <USBD_Get_USB_Status>
 800718c:	4603      	mov	r3, r0
 800718e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007190:	7dbb      	ldrb	r3, [r7, #22]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b086      	sub	sp, #24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	72fb      	strb	r3, [r7, #11]
 80071aa:	4613      	mov	r3, r2
 80071ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	7af9      	ldrb	r1, [r7, #11]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	f7fa fc93 	bl	8001aec <HAL_PCD_EP_Receive>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f83b 	bl	8007248 <USBD_Get_USB_Status>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80071d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fa fcb2 	bl	8001b60 <HAL_PCD_EP_GetRxCount>
 80071fc:	4603      	mov	r3, r0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_static_malloc+0x14>)
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	20000234 	.word	0x20000234

08007220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d817      	bhi.n	800728c <USBD_Get_USB_Status+0x44>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <USBD_Get_USB_Status+0x1c>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007275 	.word	0x08007275
 8007268:	0800727b 	.word	0x0800727b
 800726c:	08007281 	.word	0x08007281
 8007270:	08007287 	.word	0x08007287
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	e00b      	b.n	8007292 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]
    break;
 800727e:	e008      	b.n	8007292 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
    break;
 8007284:	e005      	b.n	8007292 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007286:	2302      	movs	r3, #2
 8007288:	73fb      	strb	r3, [r7, #15]
    break;
 800728a:	e002      	b.n	8007292 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	73fb      	strb	r3, [r7, #15]
    break;
 8007290:	bf00      	nop
  }
  return usb_status;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2212      	movs	r2, #18
 80072b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072b2:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000148 	.word	0x20000148

080072c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2204      	movs	r2, #4
 80072d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072d6:	4b03      	ldr	r3, [pc, #12]	; (80072e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	2000015c 	.word	0x2000015c

080072e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4907      	ldr	r1, [pc, #28]	; (800731c <USBD_FS_ProductStrDescriptor+0x34>)
 80072fe:	4808      	ldr	r0, [pc, #32]	; (8007320 <USBD_FS_ProductStrDescriptor+0x38>)
 8007300:	f7fe fe49 	bl	8005f96 <USBD_GetString>
 8007304:	e004      	b.n	8007310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	4904      	ldr	r1, [pc, #16]	; (800731c <USBD_FS_ProductStrDescriptor+0x34>)
 800730a:	4805      	ldr	r0, [pc, #20]	; (8007320 <USBD_FS_ProductStrDescriptor+0x38>)
 800730c:	f7fe fe43 	bl	8005f96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007310:	4b02      	ldr	r3, [pc, #8]	; (800731c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20001294 	.word	0x20001294
 8007320:	08008440 	.word	0x08008440

08007324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	4904      	ldr	r1, [pc, #16]	; (8007344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007334:	4804      	ldr	r0, [pc, #16]	; (8007348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007336:	f7fe fe2e 	bl	8005f96 <USBD_GetString>
  return USBD_StrDesc;
 800733a:	4b02      	ldr	r3, [pc, #8]	; (8007344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20001294 	.word	0x20001294
 8007348:	08008458 	.word	0x08008458

0800734c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	221a      	movs	r2, #26
 800735c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800735e:	f000 f843 	bl	80073e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007362:	4b02      	ldr	r3, [pc, #8]	; (800736c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000160 	.word	0x20000160

08007370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d105      	bne.n	800738e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	4907      	ldr	r1, [pc, #28]	; (80073a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007386:	4808      	ldr	r0, [pc, #32]	; (80073a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007388:	f7fe fe05 	bl	8005f96 <USBD_GetString>
 800738c:	e004      	b.n	8007398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	4904      	ldr	r1, [pc, #16]	; (80073a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007392:	4805      	ldr	r0, [pc, #20]	; (80073a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007394:	f7fe fdff 	bl	8005f96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007398:	4b02      	ldr	r3, [pc, #8]	; (80073a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20001294 	.word	0x20001294
 80073a8:	0800846c 	.word	0x0800846c

080073ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4907      	ldr	r1, [pc, #28]	; (80073e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073c2:	4808      	ldr	r0, [pc, #32]	; (80073e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073c4:	f7fe fde7 	bl	8005f96 <USBD_GetString>
 80073c8:	e004      	b.n	80073d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ce:	4805      	ldr	r0, [pc, #20]	; (80073e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073d0:	f7fe fde1 	bl	8005f96 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20001294 	.word	0x20001294
 80073e4:	08008478 	.word	0x08008478

080073e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <Get_SerialNum+0x44>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <Get_SerialNum+0x48>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <Get_SerialNum+0x4c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800740e:	2208      	movs	r2, #8
 8007410:	4909      	ldr	r1, [pc, #36]	; (8007438 <Get_SerialNum+0x50>)
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f814 	bl	8007440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007418:	2204      	movs	r2, #4
 800741a:	4908      	ldr	r1, [pc, #32]	; (800743c <Get_SerialNum+0x54>)
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f000 f80f 	bl	8007440 <IntToUnicode>
  }
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	1ffff7e8 	.word	0x1ffff7e8
 8007430:	1ffff7ec 	.word	0x1ffff7ec
 8007434:	1ffff7f0 	.word	0x1ffff7f0
 8007438:	20000162 	.word	0x20000162
 800743c:	20000172 	.word	0x20000172

08007440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
 8007456:	e027      	b.n	80074a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	0f1b      	lsrs	r3, r3, #28
 800745c:	2b09      	cmp	r3, #9
 800745e:	d80b      	bhi.n	8007478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	0f1b      	lsrs	r3, r3, #28
 8007464:	b2da      	uxtb	r2, r3
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4619      	mov	r1, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	440b      	add	r3, r1
 8007470:	3230      	adds	r2, #48	; 0x30
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	e00a      	b.n	800748e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0f1b      	lsrs	r3, r3, #28
 800747c:	b2da      	uxtb	r2, r3
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4619      	mov	r1, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	440b      	add	r3, r1
 8007488:	3237      	adds	r2, #55	; 0x37
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	3301      	adds	r3, #1
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
 80074a8:	7dfa      	ldrb	r2, [r7, #23]
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3d3      	bcc.n	8007458 <IntToUnicode+0x18>
  }
}
 80074b0:	bf00      	nop
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr
	...

080074bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80074bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80074be:	e003      	b.n	80074c8 <LoopCopyDataInit>

080074c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80074c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80074c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80074c6:	3104      	adds	r1, #4

080074c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80074c8:	480a      	ldr	r0, [pc, #40]	; (80074f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80074cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80074ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80074d0:	d3f6      	bcc.n	80074c0 <CopyDataInit>
  ldr r2, =_sbss
 80074d2:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80074d4:	e002      	b.n	80074dc <LoopFillZerobss>

080074d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80074d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80074d8:	f842 3b04 	str.w	r3, [r2], #4

080074dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80074dc:	4b08      	ldr	r3, [pc, #32]	; (8007500 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80074de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80074e0:	d3f9      	bcc.n	80074d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074e2:	f7ff fa67 	bl	80069b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074e6:	f000 f815 	bl	8007514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074ea:	f7ff f805 	bl	80064f8 <main>
  bx lr
 80074ee:	4770      	bx	lr
  ldr r3, =_sidata
 80074f0:	08008540 	.word	0x08008540
  ldr r0, =_sdata
 80074f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80074f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80074fc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8007500:	20001498 	.word	0x20001498

08007504 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007504:	e7fe      	b.n	8007504 <CAN1_RX1_IRQHandler>
	...

08007508 <__errno>:
 8007508:	4b01      	ldr	r3, [pc, #4]	; (8007510 <__errno+0x8>)
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	2000017c 	.word	0x2000017c

08007514 <__libc_init_array>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	2500      	movs	r5, #0
 8007518:	4e0c      	ldr	r6, [pc, #48]	; (800754c <__libc_init_array+0x38>)
 800751a:	4c0d      	ldr	r4, [pc, #52]	; (8007550 <__libc_init_array+0x3c>)
 800751c:	1ba4      	subs	r4, r4, r6
 800751e:	10a4      	asrs	r4, r4, #2
 8007520:	42a5      	cmp	r5, r4
 8007522:	d109      	bne.n	8007538 <__libc_init_array+0x24>
 8007524:	f000 ff5a 	bl	80083dc <_init>
 8007528:	2500      	movs	r5, #0
 800752a:	4e0a      	ldr	r6, [pc, #40]	; (8007554 <__libc_init_array+0x40>)
 800752c:	4c0a      	ldr	r4, [pc, #40]	; (8007558 <__libc_init_array+0x44>)
 800752e:	1ba4      	subs	r4, r4, r6
 8007530:	10a4      	asrs	r4, r4, #2
 8007532:	42a5      	cmp	r5, r4
 8007534:	d105      	bne.n	8007542 <__libc_init_array+0x2e>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800753c:	4798      	blx	r3
 800753e:	3501      	adds	r5, #1
 8007540:	e7ee      	b.n	8007520 <__libc_init_array+0xc>
 8007542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007546:	4798      	blx	r3
 8007548:	3501      	adds	r5, #1
 800754a:	e7f2      	b.n	8007532 <__libc_init_array+0x1e>
 800754c:	08008538 	.word	0x08008538
 8007550:	08008538 	.word	0x08008538
 8007554:	08008538 	.word	0x08008538
 8007558:	0800853c 	.word	0x0800853c

0800755c <memset>:
 800755c:	4603      	mov	r3, r0
 800755e:	4402      	add	r2, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <iprintf>:
 800756c:	b40f      	push	{r0, r1, r2, r3}
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <iprintf+0x2c>)
 8007570:	b513      	push	{r0, r1, r4, lr}
 8007572:	681c      	ldr	r4, [r3, #0]
 8007574:	b124      	cbz	r4, 8007580 <iprintf+0x14>
 8007576:	69a3      	ldr	r3, [r4, #24]
 8007578:	b913      	cbnz	r3, 8007580 <iprintf+0x14>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f862 	bl	8007644 <__sinit>
 8007580:	ab05      	add	r3, sp, #20
 8007582:	9a04      	ldr	r2, [sp, #16]
 8007584:	68a1      	ldr	r1, [r4, #8]
 8007586:	4620      	mov	r0, r4
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	f000 f967 	bl	800785c <_vfiprintf_r>
 800758e:	b002      	add	sp, #8
 8007590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007594:	b004      	add	sp, #16
 8007596:	4770      	bx	lr
 8007598:	2000017c 	.word	0x2000017c

0800759c <putchar>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <putchar+0x24>)
 80075a0:	4605      	mov	r5, r0
 80075a2:	681c      	ldr	r4, [r3, #0]
 80075a4:	b124      	cbz	r4, 80075b0 <putchar+0x14>
 80075a6:	69a3      	ldr	r3, [r4, #24]
 80075a8:	b913      	cbnz	r3, 80075b0 <putchar+0x14>
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 f84a 	bl	8007644 <__sinit>
 80075b0:	68a2      	ldr	r2, [r4, #8]
 80075b2:	4629      	mov	r1, r5
 80075b4:	4620      	mov	r0, r4
 80075b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ba:	f000 bbed 	b.w	8007d98 <_putc_r>
 80075be:	bf00      	nop
 80075c0:	2000017c 	.word	0x2000017c

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	6083      	str	r3, [r0, #8]
 80075d0:	8181      	strh	r1, [r0, #12]
 80075d2:	6643      	str	r3, [r0, #100]	; 0x64
 80075d4:	81c2      	strh	r2, [r0, #14]
 80075d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	; 0x5c
 80075e2:	f7ff ffbb 	bl	800755c <memset>
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x38>)
 80075e8:	6224      	str	r4, [r4, #32]
 80075ea:	6263      	str	r3, [r4, #36]	; 0x24
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <std+0x3c>)
 80075ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80075f0:	4b04      	ldr	r3, [pc, #16]	; (8007604 <std+0x40>)
 80075f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <std+0x44>)
 80075f6:	6323      	str	r3, [r4, #48]	; 0x30
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	08007e25 	.word	0x08007e25
 8007600:	08007e47 	.word	0x08007e47
 8007604:	08007e7f 	.word	0x08007e7f
 8007608:	08007ea3 	.word	0x08007ea3

0800760c <_cleanup_r>:
 800760c:	4901      	ldr	r1, [pc, #4]	; (8007614 <_cleanup_r+0x8>)
 800760e:	f000 b885 	b.w	800771c <_fwalk_reent>
 8007612:	bf00      	nop
 8007614:	0800817d 	.word	0x0800817d

08007618 <__sfmoreglue>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	2568      	movs	r5, #104	; 0x68
 800761c:	1e4a      	subs	r2, r1, #1
 800761e:	4355      	muls	r5, r2
 8007620:	460e      	mov	r6, r1
 8007622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007626:	f000 f897 	bl	8007758 <_malloc_r>
 800762a:	4604      	mov	r4, r0
 800762c:	b140      	cbz	r0, 8007640 <__sfmoreglue+0x28>
 800762e:	2100      	movs	r1, #0
 8007630:	e9c0 1600 	strd	r1, r6, [r0]
 8007634:	300c      	adds	r0, #12
 8007636:	60a0      	str	r0, [r4, #8]
 8007638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800763c:	f7ff ff8e 	bl	800755c <memset>
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}

08007644 <__sinit>:
 8007644:	6983      	ldr	r3, [r0, #24]
 8007646:	b510      	push	{r4, lr}
 8007648:	4604      	mov	r4, r0
 800764a:	bb33      	cbnz	r3, 800769a <__sinit+0x56>
 800764c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007650:	6503      	str	r3, [r0, #80]	; 0x50
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <__sinit+0x58>)
 8007654:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <__sinit+0x5c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6282      	str	r2, [r0, #40]	; 0x28
 800765a:	4298      	cmp	r0, r3
 800765c:	bf04      	itt	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	6183      	streq	r3, [r0, #24]
 8007662:	f000 f81f 	bl	80076a4 <__sfp>
 8007666:	6060      	str	r0, [r4, #4]
 8007668:	4620      	mov	r0, r4
 800766a:	f000 f81b 	bl	80076a4 <__sfp>
 800766e:	60a0      	str	r0, [r4, #8]
 8007670:	4620      	mov	r0, r4
 8007672:	f000 f817 	bl	80076a4 <__sfp>
 8007676:	2200      	movs	r2, #0
 8007678:	60e0      	str	r0, [r4, #12]
 800767a:	2104      	movs	r1, #4
 800767c:	6860      	ldr	r0, [r4, #4]
 800767e:	f7ff ffa1 	bl	80075c4 <std>
 8007682:	2201      	movs	r2, #1
 8007684:	2109      	movs	r1, #9
 8007686:	68a0      	ldr	r0, [r4, #8]
 8007688:	f7ff ff9c 	bl	80075c4 <std>
 800768c:	2202      	movs	r2, #2
 800768e:	2112      	movs	r1, #18
 8007690:	68e0      	ldr	r0, [r4, #12]
 8007692:	f7ff ff97 	bl	80075c4 <std>
 8007696:	2301      	movs	r3, #1
 8007698:	61a3      	str	r3, [r4, #24]
 800769a:	bd10      	pop	{r4, pc}
 800769c:	080084a0 	.word	0x080084a0
 80076a0:	0800760d 	.word	0x0800760d

080076a4 <__sfp>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <__sfp+0x70>)
 80076a8:	4607      	mov	r7, r0
 80076aa:	681e      	ldr	r6, [r3, #0]
 80076ac:	69b3      	ldr	r3, [r6, #24]
 80076ae:	b913      	cbnz	r3, 80076b6 <__sfp+0x12>
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ffc7 	bl	8007644 <__sinit>
 80076b6:	3648      	adds	r6, #72	; 0x48
 80076b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076bc:	3b01      	subs	r3, #1
 80076be:	d503      	bpl.n	80076c8 <__sfp+0x24>
 80076c0:	6833      	ldr	r3, [r6, #0]
 80076c2:	b133      	cbz	r3, 80076d2 <__sfp+0x2e>
 80076c4:	6836      	ldr	r6, [r6, #0]
 80076c6:	e7f7      	b.n	80076b8 <__sfp+0x14>
 80076c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076cc:	b16d      	cbz	r5, 80076ea <__sfp+0x46>
 80076ce:	3468      	adds	r4, #104	; 0x68
 80076d0:	e7f4      	b.n	80076bc <__sfp+0x18>
 80076d2:	2104      	movs	r1, #4
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff ff9f 	bl	8007618 <__sfmoreglue>
 80076da:	6030      	str	r0, [r6, #0]
 80076dc:	2800      	cmp	r0, #0
 80076de:	d1f1      	bne.n	80076c4 <__sfp+0x20>
 80076e0:	230c      	movs	r3, #12
 80076e2:	4604      	mov	r4, r0
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4620      	mov	r0, r4
 80076e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ea:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <__sfp+0x74>)
 80076ec:	6665      	str	r5, [r4, #100]	; 0x64
 80076ee:	e9c4 5500 	strd	r5, r5, [r4]
 80076f2:	60a5      	str	r5, [r4, #8]
 80076f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80076f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80076fc:	2208      	movs	r2, #8
 80076fe:	4629      	mov	r1, r5
 8007700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007704:	f7ff ff2a 	bl	800755c <memset>
 8007708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800770c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007710:	e7e9      	b.n	80076e6 <__sfp+0x42>
 8007712:	bf00      	nop
 8007714:	080084a0 	.word	0x080084a0
 8007718:	ffff0001 	.word	0xffff0001

0800771c <_fwalk_reent>:
 800771c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007720:	4680      	mov	r8, r0
 8007722:	4689      	mov	r9, r1
 8007724:	2600      	movs	r6, #0
 8007726:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800772a:	b914      	cbnz	r4, 8007732 <_fwalk_reent+0x16>
 800772c:	4630      	mov	r0, r6
 800772e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007732:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007736:	3f01      	subs	r7, #1
 8007738:	d501      	bpl.n	800773e <_fwalk_reent+0x22>
 800773a:	6824      	ldr	r4, [r4, #0]
 800773c:	e7f5      	b.n	800772a <_fwalk_reent+0xe>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d907      	bls.n	8007754 <_fwalk_reent+0x38>
 8007744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007748:	3301      	adds	r3, #1
 800774a:	d003      	beq.n	8007754 <_fwalk_reent+0x38>
 800774c:	4629      	mov	r1, r5
 800774e:	4640      	mov	r0, r8
 8007750:	47c8      	blx	r9
 8007752:	4306      	orrs	r6, r0
 8007754:	3568      	adds	r5, #104	; 0x68
 8007756:	e7ee      	b.n	8007736 <_fwalk_reent+0x1a>

08007758 <_malloc_r>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	1ccd      	adds	r5, r1, #3
 800775c:	f025 0503 	bic.w	r5, r5, #3
 8007760:	3508      	adds	r5, #8
 8007762:	2d0c      	cmp	r5, #12
 8007764:	bf38      	it	cc
 8007766:	250c      	movcc	r5, #12
 8007768:	2d00      	cmp	r5, #0
 800776a:	4606      	mov	r6, r0
 800776c:	db01      	blt.n	8007772 <_malloc_r+0x1a>
 800776e:	42a9      	cmp	r1, r5
 8007770:	d903      	bls.n	800777a <_malloc_r+0x22>
 8007772:	230c      	movs	r3, #12
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	f000 fdad 	bl	80082d8 <__malloc_lock>
 800777e:	4a21      	ldr	r2, [pc, #132]	; (8007804 <_malloc_r+0xac>)
 8007780:	6814      	ldr	r4, [r2, #0]
 8007782:	4621      	mov	r1, r4
 8007784:	b991      	cbnz	r1, 80077ac <_malloc_r+0x54>
 8007786:	4c20      	ldr	r4, [pc, #128]	; (8007808 <_malloc_r+0xb0>)
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	b91b      	cbnz	r3, 8007794 <_malloc_r+0x3c>
 800778c:	4630      	mov	r0, r6
 800778e:	f000 fb39 	bl	8007e04 <_sbrk_r>
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	4629      	mov	r1, r5
 8007796:	4630      	mov	r0, r6
 8007798:	f000 fb34 	bl	8007e04 <_sbrk_r>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d124      	bne.n	80077ea <_malloc_r+0x92>
 80077a0:	230c      	movs	r3, #12
 80077a2:	4630      	mov	r0, r6
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	f000 fd98 	bl	80082da <__malloc_unlock>
 80077aa:	e7e4      	b.n	8007776 <_malloc_r+0x1e>
 80077ac:	680b      	ldr	r3, [r1, #0]
 80077ae:	1b5b      	subs	r3, r3, r5
 80077b0:	d418      	bmi.n	80077e4 <_malloc_r+0x8c>
 80077b2:	2b0b      	cmp	r3, #11
 80077b4:	d90f      	bls.n	80077d6 <_malloc_r+0x7e>
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	18cc      	adds	r4, r1, r3
 80077ba:	50cd      	str	r5, [r1, r3]
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 fd8c 	bl	80082da <__malloc_unlock>
 80077c2:	f104 000b 	add.w	r0, r4, #11
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	f020 0007 	bic.w	r0, r0, #7
 80077cc:	1ac3      	subs	r3, r0, r3
 80077ce:	d0d3      	beq.n	8007778 <_malloc_r+0x20>
 80077d0:	425a      	negs	r2, r3
 80077d2:	50e2      	str	r2, [r4, r3]
 80077d4:	e7d0      	b.n	8007778 <_malloc_r+0x20>
 80077d6:	684b      	ldr	r3, [r1, #4]
 80077d8:	428c      	cmp	r4, r1
 80077da:	bf16      	itet	ne
 80077dc:	6063      	strne	r3, [r4, #4]
 80077de:	6013      	streq	r3, [r2, #0]
 80077e0:	460c      	movne	r4, r1
 80077e2:	e7eb      	b.n	80077bc <_malloc_r+0x64>
 80077e4:	460c      	mov	r4, r1
 80077e6:	6849      	ldr	r1, [r1, #4]
 80077e8:	e7cc      	b.n	8007784 <_malloc_r+0x2c>
 80077ea:	1cc4      	adds	r4, r0, #3
 80077ec:	f024 0403 	bic.w	r4, r4, #3
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d005      	beq.n	8007800 <_malloc_r+0xa8>
 80077f4:	1a21      	subs	r1, r4, r0
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 fb04 	bl	8007e04 <_sbrk_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d0cf      	beq.n	80077a0 <_malloc_r+0x48>
 8007800:	6025      	str	r5, [r4, #0]
 8007802:	e7db      	b.n	80077bc <_malloc_r+0x64>
 8007804:	20000454 	.word	0x20000454
 8007808:	20000458 	.word	0x20000458

0800780c <__sfputc_r>:
 800780c:	6893      	ldr	r3, [r2, #8]
 800780e:	b410      	push	{r4}
 8007810:	3b01      	subs	r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	6093      	str	r3, [r2, #8]
 8007816:	da07      	bge.n	8007828 <__sfputc_r+0x1c>
 8007818:	6994      	ldr	r4, [r2, #24]
 800781a:	42a3      	cmp	r3, r4
 800781c:	db01      	blt.n	8007822 <__sfputc_r+0x16>
 800781e:	290a      	cmp	r1, #10
 8007820:	d102      	bne.n	8007828 <__sfputc_r+0x1c>
 8007822:	bc10      	pop	{r4}
 8007824:	f000 bb42 	b.w	8007eac <__swbuf_r>
 8007828:	6813      	ldr	r3, [r2, #0]
 800782a:	1c58      	adds	r0, r3, #1
 800782c:	6010      	str	r0, [r2, #0]
 800782e:	7019      	strb	r1, [r3, #0]
 8007830:	4608      	mov	r0, r1
 8007832:	bc10      	pop	{r4}
 8007834:	4770      	bx	lr

08007836 <__sfputs_r>:
 8007836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007838:	4606      	mov	r6, r0
 800783a:	460f      	mov	r7, r1
 800783c:	4614      	mov	r4, r2
 800783e:	18d5      	adds	r5, r2, r3
 8007840:	42ac      	cmp	r4, r5
 8007842:	d101      	bne.n	8007848 <__sfputs_r+0x12>
 8007844:	2000      	movs	r0, #0
 8007846:	e007      	b.n	8007858 <__sfputs_r+0x22>
 8007848:	463a      	mov	r2, r7
 800784a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784e:	4630      	mov	r0, r6
 8007850:	f7ff ffdc 	bl	800780c <__sfputc_r>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d1f3      	bne.n	8007840 <__sfputs_r+0xa>
 8007858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800785c <_vfiprintf_r>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	460c      	mov	r4, r1
 8007862:	b09d      	sub	sp, #116	; 0x74
 8007864:	4617      	mov	r7, r2
 8007866:	461d      	mov	r5, r3
 8007868:	4606      	mov	r6, r0
 800786a:	b118      	cbz	r0, 8007874 <_vfiprintf_r+0x18>
 800786c:	6983      	ldr	r3, [r0, #24]
 800786e:	b90b      	cbnz	r3, 8007874 <_vfiprintf_r+0x18>
 8007870:	f7ff fee8 	bl	8007644 <__sinit>
 8007874:	4b7c      	ldr	r3, [pc, #496]	; (8007a68 <_vfiprintf_r+0x20c>)
 8007876:	429c      	cmp	r4, r3
 8007878:	d158      	bne.n	800792c <_vfiprintf_r+0xd0>
 800787a:	6874      	ldr	r4, [r6, #4]
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	0718      	lsls	r0, r3, #28
 8007880:	d55e      	bpl.n	8007940 <_vfiprintf_r+0xe4>
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d05b      	beq.n	8007940 <_vfiprintf_r+0xe4>
 8007888:	2300      	movs	r3, #0
 800788a:	9309      	str	r3, [sp, #36]	; 0x24
 800788c:	2320      	movs	r3, #32
 800788e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007892:	2330      	movs	r3, #48	; 0x30
 8007894:	f04f 0b01 	mov.w	fp, #1
 8007898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800789c:	9503      	str	r5, [sp, #12]
 800789e:	46b8      	mov	r8, r7
 80078a0:	4645      	mov	r5, r8
 80078a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078a6:	b10b      	cbz	r3, 80078ac <_vfiprintf_r+0x50>
 80078a8:	2b25      	cmp	r3, #37	; 0x25
 80078aa:	d154      	bne.n	8007956 <_vfiprintf_r+0xfa>
 80078ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80078b0:	d00b      	beq.n	80078ca <_vfiprintf_r+0x6e>
 80078b2:	4653      	mov	r3, sl
 80078b4:	463a      	mov	r2, r7
 80078b6:	4621      	mov	r1, r4
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff ffbc 	bl	8007836 <__sfputs_r>
 80078be:	3001      	adds	r0, #1
 80078c0:	f000 80c2 	beq.w	8007a48 <_vfiprintf_r+0x1ec>
 80078c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c6:	4453      	add	r3, sl
 80078c8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ca:	f898 3000 	ldrb.w	r3, [r8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80ba 	beq.w	8007a48 <_vfiprintf_r+0x1ec>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	9307      	str	r3, [sp, #28]
 80078e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078e6:	931a      	str	r3, [sp, #104]	; 0x68
 80078e8:	46a8      	mov	r8, r5
 80078ea:	2205      	movs	r2, #5
 80078ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80078f0:	485e      	ldr	r0, [pc, #376]	; (8007a6c <_vfiprintf_r+0x210>)
 80078f2:	f000 fce3 	bl	80082bc <memchr>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	bb78      	cbnz	r0, 800795a <_vfiprintf_r+0xfe>
 80078fa:	06d9      	lsls	r1, r3, #27
 80078fc:	bf44      	itt	mi
 80078fe:	2220      	movmi	r2, #32
 8007900:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007904:	071a      	lsls	r2, r3, #28
 8007906:	bf44      	itt	mi
 8007908:	222b      	movmi	r2, #43	; 0x2b
 800790a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800790e:	782a      	ldrb	r2, [r5, #0]
 8007910:	2a2a      	cmp	r2, #42	; 0x2a
 8007912:	d02a      	beq.n	800796a <_vfiprintf_r+0x10e>
 8007914:	46a8      	mov	r8, r5
 8007916:	2000      	movs	r0, #0
 8007918:	250a      	movs	r5, #10
 800791a:	9a07      	ldr	r2, [sp, #28]
 800791c:	4641      	mov	r1, r8
 800791e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007922:	3b30      	subs	r3, #48	; 0x30
 8007924:	2b09      	cmp	r3, #9
 8007926:	d969      	bls.n	80079fc <_vfiprintf_r+0x1a0>
 8007928:	b360      	cbz	r0, 8007984 <_vfiprintf_r+0x128>
 800792a:	e024      	b.n	8007976 <_vfiprintf_r+0x11a>
 800792c:	4b50      	ldr	r3, [pc, #320]	; (8007a70 <_vfiprintf_r+0x214>)
 800792e:	429c      	cmp	r4, r3
 8007930:	d101      	bne.n	8007936 <_vfiprintf_r+0xda>
 8007932:	68b4      	ldr	r4, [r6, #8]
 8007934:	e7a2      	b.n	800787c <_vfiprintf_r+0x20>
 8007936:	4b4f      	ldr	r3, [pc, #316]	; (8007a74 <_vfiprintf_r+0x218>)
 8007938:	429c      	cmp	r4, r3
 800793a:	bf08      	it	eq
 800793c:	68f4      	ldreq	r4, [r6, #12]
 800793e:	e79d      	b.n	800787c <_vfiprintf_r+0x20>
 8007940:	4621      	mov	r1, r4
 8007942:	4630      	mov	r0, r6
 8007944:	f000 fb16 	bl	8007f74 <__swsetup_r>
 8007948:	2800      	cmp	r0, #0
 800794a:	d09d      	beq.n	8007888 <_vfiprintf_r+0x2c>
 800794c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007950:	b01d      	add	sp, #116	; 0x74
 8007952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	46a8      	mov	r8, r5
 8007958:	e7a2      	b.n	80078a0 <_vfiprintf_r+0x44>
 800795a:	4a44      	ldr	r2, [pc, #272]	; (8007a6c <_vfiprintf_r+0x210>)
 800795c:	4645      	mov	r5, r8
 800795e:	1a80      	subs	r0, r0, r2
 8007960:	fa0b f000 	lsl.w	r0, fp, r0
 8007964:	4318      	orrs	r0, r3
 8007966:	9004      	str	r0, [sp, #16]
 8007968:	e7be      	b.n	80078e8 <_vfiprintf_r+0x8c>
 800796a:	9a03      	ldr	r2, [sp, #12]
 800796c:	1d11      	adds	r1, r2, #4
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	9103      	str	r1, [sp, #12]
 8007972:	2a00      	cmp	r2, #0
 8007974:	db01      	blt.n	800797a <_vfiprintf_r+0x11e>
 8007976:	9207      	str	r2, [sp, #28]
 8007978:	e004      	b.n	8007984 <_vfiprintf_r+0x128>
 800797a:	4252      	negs	r2, r2
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	9207      	str	r2, [sp, #28]
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	f898 3000 	ldrb.w	r3, [r8]
 8007988:	2b2e      	cmp	r3, #46	; 0x2e
 800798a:	d10e      	bne.n	80079aa <_vfiprintf_r+0x14e>
 800798c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007990:	2b2a      	cmp	r3, #42	; 0x2a
 8007992:	d138      	bne.n	8007a06 <_vfiprintf_r+0x1aa>
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	f108 0802 	add.w	r8, r8, #2
 800799a:	1d1a      	adds	r2, r3, #4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	9203      	str	r2, [sp, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bfb8      	it	lt
 80079a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079a8:	9305      	str	r3, [sp, #20]
 80079aa:	4d33      	ldr	r5, [pc, #204]	; (8007a78 <_vfiprintf_r+0x21c>)
 80079ac:	2203      	movs	r2, #3
 80079ae:	f898 1000 	ldrb.w	r1, [r8]
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 fc82 	bl	80082bc <memchr>
 80079b8:	b140      	cbz	r0, 80079cc <_vfiprintf_r+0x170>
 80079ba:	2340      	movs	r3, #64	; 0x40
 80079bc:	1b40      	subs	r0, r0, r5
 80079be:	fa03 f000 	lsl.w	r0, r3, r0
 80079c2:	9b04      	ldr	r3, [sp, #16]
 80079c4:	f108 0801 	add.w	r8, r8, #1
 80079c8:	4303      	orrs	r3, r0
 80079ca:	9304      	str	r3, [sp, #16]
 80079cc:	f898 1000 	ldrb.w	r1, [r8]
 80079d0:	2206      	movs	r2, #6
 80079d2:	482a      	ldr	r0, [pc, #168]	; (8007a7c <_vfiprintf_r+0x220>)
 80079d4:	f108 0701 	add.w	r7, r8, #1
 80079d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079dc:	f000 fc6e 	bl	80082bc <memchr>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d037      	beq.n	8007a54 <_vfiprintf_r+0x1f8>
 80079e4:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <_vfiprintf_r+0x224>)
 80079e6:	bb1b      	cbnz	r3, 8007a30 <_vfiprintf_r+0x1d4>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	3307      	adds	r3, #7
 80079ec:	f023 0307 	bic.w	r3, r3, #7
 80079f0:	3308      	adds	r3, #8
 80079f2:	9303      	str	r3, [sp, #12]
 80079f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f6:	444b      	add	r3, r9
 80079f8:	9309      	str	r3, [sp, #36]	; 0x24
 80079fa:	e750      	b.n	800789e <_vfiprintf_r+0x42>
 80079fc:	fb05 3202 	mla	r2, r5, r2, r3
 8007a00:	2001      	movs	r0, #1
 8007a02:	4688      	mov	r8, r1
 8007a04:	e78a      	b.n	800791c <_vfiprintf_r+0xc0>
 8007a06:	2300      	movs	r3, #0
 8007a08:	250a      	movs	r5, #10
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	f108 0801 	add.w	r8, r8, #1
 8007a10:	9305      	str	r3, [sp, #20]
 8007a12:	4640      	mov	r0, r8
 8007a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a18:	3a30      	subs	r2, #48	; 0x30
 8007a1a:	2a09      	cmp	r2, #9
 8007a1c:	d903      	bls.n	8007a26 <_vfiprintf_r+0x1ca>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0c3      	beq.n	80079aa <_vfiprintf_r+0x14e>
 8007a22:	9105      	str	r1, [sp, #20]
 8007a24:	e7c1      	b.n	80079aa <_vfiprintf_r+0x14e>
 8007a26:	fb05 2101 	mla	r1, r5, r1, r2
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	e7f0      	b.n	8007a12 <_vfiprintf_r+0x1b6>
 8007a30:	ab03      	add	r3, sp, #12
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4622      	mov	r2, r4
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <_vfiprintf_r+0x228>)
 8007a38:	a904      	add	r1, sp, #16
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f3af 8000 	nop.w
 8007a40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a44:	4681      	mov	r9, r0
 8007a46:	d1d5      	bne.n	80079f4 <_vfiprintf_r+0x198>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	065b      	lsls	r3, r3, #25
 8007a4c:	f53f af7e 	bmi.w	800794c <_vfiprintf_r+0xf0>
 8007a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a52:	e77d      	b.n	8007950 <_vfiprintf_r+0xf4>
 8007a54:	ab03      	add	r3, sp, #12
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <_vfiprintf_r+0x228>)
 8007a5c:	a904      	add	r1, sp, #16
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f000 f888 	bl	8007b74 <_printf_i>
 8007a64:	e7ec      	b.n	8007a40 <_vfiprintf_r+0x1e4>
 8007a66:	bf00      	nop
 8007a68:	080084c4 	.word	0x080084c4
 8007a6c:	08008504 	.word	0x08008504
 8007a70:	080084e4 	.word	0x080084e4
 8007a74:	080084a4 	.word	0x080084a4
 8007a78:	0800850a 	.word	0x0800850a
 8007a7c:	0800850e 	.word	0x0800850e
 8007a80:	00000000 	.word	0x00000000
 8007a84:	08007837 	.word	0x08007837

08007a88 <_printf_common>:
 8007a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	4691      	mov	r9, r2
 8007a8e:	461f      	mov	r7, r3
 8007a90:	688a      	ldr	r2, [r1, #8]
 8007a92:	690b      	ldr	r3, [r1, #16]
 8007a94:	4606      	mov	r6, r0
 8007a96:	4293      	cmp	r3, r2
 8007a98:	bfb8      	it	lt
 8007a9a:	4613      	movlt	r3, r2
 8007a9c:	f8c9 3000 	str.w	r3, [r9]
 8007aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aaa:	b112      	cbz	r2, 8007ab2 <_printf_common+0x2a>
 8007aac:	3301      	adds	r3, #1
 8007aae:	f8c9 3000 	str.w	r3, [r9]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0699      	lsls	r1, r3, #26
 8007ab6:	bf42      	ittt	mi
 8007ab8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007abc:	3302      	addmi	r3, #2
 8007abe:	f8c9 3000 	strmi.w	r3, [r9]
 8007ac2:	6825      	ldr	r5, [r4, #0]
 8007ac4:	f015 0506 	ands.w	r5, r5, #6
 8007ac8:	d107      	bne.n	8007ada <_printf_common+0x52>
 8007aca:	f104 0a19 	add.w	sl, r4, #25
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	42ab      	cmp	r3, r5
 8007ad8:	dc29      	bgt.n	8007b2e <_printf_common+0xa6>
 8007ada:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	3300      	adds	r3, #0
 8007ae2:	bf18      	it	ne
 8007ae4:	2301      	movne	r3, #1
 8007ae6:	0692      	lsls	r2, r2, #26
 8007ae8:	d42e      	bmi.n	8007b48 <_printf_common+0xc0>
 8007aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aee:	4639      	mov	r1, r7
 8007af0:	4630      	mov	r0, r6
 8007af2:	47c0      	blx	r8
 8007af4:	3001      	adds	r0, #1
 8007af6:	d021      	beq.n	8007b3c <_printf_common+0xb4>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	68e5      	ldr	r5, [r4, #12]
 8007afc:	f003 0306 	and.w	r3, r3, #6
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	bf18      	it	ne
 8007b04:	2500      	movne	r5, #0
 8007b06:	f8d9 2000 	ldr.w	r2, [r9]
 8007b0a:	f04f 0900 	mov.w	r9, #0
 8007b0e:	bf08      	it	eq
 8007b10:	1aad      	subeq	r5, r5, r2
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	6922      	ldr	r2, [r4, #16]
 8007b16:	bf08      	it	eq
 8007b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	bfc4      	itt	gt
 8007b20:	1a9b      	subgt	r3, r3, r2
 8007b22:	18ed      	addgt	r5, r5, r3
 8007b24:	341a      	adds	r4, #26
 8007b26:	454d      	cmp	r5, r9
 8007b28:	d11a      	bne.n	8007b60 <_printf_common+0xd8>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e008      	b.n	8007b40 <_printf_common+0xb8>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	4639      	mov	r1, r7
 8007b34:	4630      	mov	r0, r6
 8007b36:	47c0      	blx	r8
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d103      	bne.n	8007b44 <_printf_common+0xbc>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7c2      	b.n	8007ace <_printf_common+0x46>
 8007b48:	2030      	movs	r0, #48	; 0x30
 8007b4a:	18e1      	adds	r1, r4, r3
 8007b4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b56:	4422      	add	r2, r4
 8007b58:	3302      	adds	r3, #2
 8007b5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b5e:	e7c4      	b.n	8007aea <_printf_common+0x62>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4622      	mov	r2, r4
 8007b64:	4639      	mov	r1, r7
 8007b66:	4630      	mov	r0, r6
 8007b68:	47c0      	blx	r8
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0e6      	beq.n	8007b3c <_printf_common+0xb4>
 8007b6e:	f109 0901 	add.w	r9, r9, #1
 8007b72:	e7d8      	b.n	8007b26 <_printf_common+0x9e>

08007b74 <_printf_i>:
 8007b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	7e09      	ldrb	r1, [r1, #24]
 8007b80:	b085      	sub	sp, #20
 8007b82:	296e      	cmp	r1, #110	; 0x6e
 8007b84:	4617      	mov	r7, r2
 8007b86:	4606      	mov	r6, r0
 8007b88:	4698      	mov	r8, r3
 8007b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b8c:	f000 80b3 	beq.w	8007cf6 <_printf_i+0x182>
 8007b90:	d822      	bhi.n	8007bd8 <_printf_i+0x64>
 8007b92:	2963      	cmp	r1, #99	; 0x63
 8007b94:	d036      	beq.n	8007c04 <_printf_i+0x90>
 8007b96:	d80a      	bhi.n	8007bae <_printf_i+0x3a>
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	f000 80b9 	beq.w	8007d10 <_printf_i+0x19c>
 8007b9e:	2958      	cmp	r1, #88	; 0x58
 8007ba0:	f000 8083 	beq.w	8007caa <_printf_i+0x136>
 8007ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bac:	e032      	b.n	8007c14 <_printf_i+0xa0>
 8007bae:	2964      	cmp	r1, #100	; 0x64
 8007bb0:	d001      	beq.n	8007bb6 <_printf_i+0x42>
 8007bb2:	2969      	cmp	r1, #105	; 0x69
 8007bb4:	d1f6      	bne.n	8007ba4 <_printf_i+0x30>
 8007bb6:	6820      	ldr	r0, [r4, #0]
 8007bb8:	6813      	ldr	r3, [r2, #0]
 8007bba:	0605      	lsls	r5, r0, #24
 8007bbc:	f103 0104 	add.w	r1, r3, #4
 8007bc0:	d52a      	bpl.n	8007c18 <_printf_i+0xa4>
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da03      	bge.n	8007bd2 <_printf_i+0x5e>
 8007bca:	222d      	movs	r2, #45	; 0x2d
 8007bcc:	425b      	negs	r3, r3
 8007bce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bd2:	486f      	ldr	r0, [pc, #444]	; (8007d90 <_printf_i+0x21c>)
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	e039      	b.n	8007c4c <_printf_i+0xd8>
 8007bd8:	2973      	cmp	r1, #115	; 0x73
 8007bda:	f000 809d 	beq.w	8007d18 <_printf_i+0x1a4>
 8007bde:	d808      	bhi.n	8007bf2 <_printf_i+0x7e>
 8007be0:	296f      	cmp	r1, #111	; 0x6f
 8007be2:	d020      	beq.n	8007c26 <_printf_i+0xb2>
 8007be4:	2970      	cmp	r1, #112	; 0x70
 8007be6:	d1dd      	bne.n	8007ba4 <_printf_i+0x30>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	f043 0320 	orr.w	r3, r3, #32
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	e003      	b.n	8007bfa <_printf_i+0x86>
 8007bf2:	2975      	cmp	r1, #117	; 0x75
 8007bf4:	d017      	beq.n	8007c26 <_printf_i+0xb2>
 8007bf6:	2978      	cmp	r1, #120	; 0x78
 8007bf8:	d1d4      	bne.n	8007ba4 <_printf_i+0x30>
 8007bfa:	2378      	movs	r3, #120	; 0x78
 8007bfc:	4865      	ldr	r0, [pc, #404]	; (8007d94 <_printf_i+0x220>)
 8007bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c02:	e055      	b.n	8007cb0 <_printf_i+0x13c>
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c0a:	1d19      	adds	r1, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6011      	str	r1, [r2, #0]
 8007c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c14:	2301      	movs	r3, #1
 8007c16:	e08c      	b.n	8007d32 <_printf_i+0x1be>
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c1e:	6011      	str	r1, [r2, #0]
 8007c20:	bf18      	it	ne
 8007c22:	b21b      	sxthne	r3, r3
 8007c24:	e7cf      	b.n	8007bc6 <_printf_i+0x52>
 8007c26:	6813      	ldr	r3, [r2, #0]
 8007c28:	6825      	ldr	r5, [r4, #0]
 8007c2a:	1d18      	adds	r0, r3, #4
 8007c2c:	6010      	str	r0, [r2, #0]
 8007c2e:	0628      	lsls	r0, r5, #24
 8007c30:	d501      	bpl.n	8007c36 <_printf_i+0xc2>
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	e002      	b.n	8007c3c <_printf_i+0xc8>
 8007c36:	0668      	lsls	r0, r5, #25
 8007c38:	d5fb      	bpl.n	8007c32 <_printf_i+0xbe>
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	296f      	cmp	r1, #111	; 0x6f
 8007c3e:	bf14      	ite	ne
 8007c40:	220a      	movne	r2, #10
 8007c42:	2208      	moveq	r2, #8
 8007c44:	4852      	ldr	r0, [pc, #328]	; (8007d90 <_printf_i+0x21c>)
 8007c46:	2100      	movs	r1, #0
 8007c48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4c:	6865      	ldr	r5, [r4, #4]
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	60a5      	str	r5, [r4, #8]
 8007c52:	f2c0 8095 	blt.w	8007d80 <_printf_i+0x20c>
 8007c56:	6821      	ldr	r1, [r4, #0]
 8007c58:	f021 0104 	bic.w	r1, r1, #4
 8007c5c:	6021      	str	r1, [r4, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d13d      	bne.n	8007cde <_printf_i+0x16a>
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	f040 808e 	bne.w	8007d84 <_printf_i+0x210>
 8007c68:	4665      	mov	r5, ip
 8007c6a:	2a08      	cmp	r2, #8
 8007c6c:	d10b      	bne.n	8007c86 <_printf_i+0x112>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	07db      	lsls	r3, r3, #31
 8007c72:	d508      	bpl.n	8007c86 <_printf_i+0x112>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	6862      	ldr	r2, [r4, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	bfde      	ittt	le
 8007c7c:	2330      	movle	r3, #48	; 0x30
 8007c7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007c86:	ebac 0305 	sub.w	r3, ip, r5
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	f8cd 8000 	str.w	r8, [sp]
 8007c90:	463b      	mov	r3, r7
 8007c92:	aa03      	add	r2, sp, #12
 8007c94:	4621      	mov	r1, r4
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff fef6 	bl	8007a88 <_printf_common>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d14d      	bne.n	8007d3c <_printf_i+0x1c8>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca4:	b005      	add	sp, #20
 8007ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007caa:	4839      	ldr	r0, [pc, #228]	; (8007d90 <_printf_i+0x21c>)
 8007cac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	6821      	ldr	r1, [r4, #0]
 8007cb4:	1d1d      	adds	r5, r3, #4
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6015      	str	r5, [r2, #0]
 8007cba:	060a      	lsls	r2, r1, #24
 8007cbc:	d50b      	bpl.n	8007cd6 <_printf_i+0x162>
 8007cbe:	07ca      	lsls	r2, r1, #31
 8007cc0:	bf44      	itt	mi
 8007cc2:	f041 0120 	orrmi.w	r1, r1, #32
 8007cc6:	6021      	strmi	r1, [r4, #0]
 8007cc8:	b91b      	cbnz	r3, 8007cd2 <_printf_i+0x15e>
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	f022 0220 	bic.w	r2, r2, #32
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	2210      	movs	r2, #16
 8007cd4:	e7b7      	b.n	8007c46 <_printf_i+0xd2>
 8007cd6:	064d      	lsls	r5, r1, #25
 8007cd8:	bf48      	it	mi
 8007cda:	b29b      	uxthmi	r3, r3
 8007cdc:	e7ef      	b.n	8007cbe <_printf_i+0x14a>
 8007cde:	4665      	mov	r5, ip
 8007ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ce4:	fb02 3311 	mls	r3, r2, r1, r3
 8007ce8:	5cc3      	ldrb	r3, [r0, r3]
 8007cea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cee:	460b      	mov	r3, r1
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d1f5      	bne.n	8007ce0 <_printf_i+0x16c>
 8007cf4:	e7b9      	b.n	8007c6a <_printf_i+0xf6>
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	1d18      	adds	r0, r3, #4
 8007cfc:	6961      	ldr	r1, [r4, #20]
 8007cfe:	6010      	str	r0, [r2, #0]
 8007d00:	0628      	lsls	r0, r5, #24
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	d501      	bpl.n	8007d0a <_printf_i+0x196>
 8007d06:	6019      	str	r1, [r3, #0]
 8007d08:	e002      	b.n	8007d10 <_printf_i+0x19c>
 8007d0a:	066a      	lsls	r2, r5, #25
 8007d0c:	d5fb      	bpl.n	8007d06 <_printf_i+0x192>
 8007d0e:	8019      	strh	r1, [r3, #0]
 8007d10:	2300      	movs	r3, #0
 8007d12:	4665      	mov	r5, ip
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	e7b9      	b.n	8007c8c <_printf_i+0x118>
 8007d18:	6813      	ldr	r3, [r2, #0]
 8007d1a:	1d19      	adds	r1, r3, #4
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	681d      	ldr	r5, [r3, #0]
 8007d20:	6862      	ldr	r2, [r4, #4]
 8007d22:	2100      	movs	r1, #0
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 fac9 	bl	80082bc <memchr>
 8007d2a:	b108      	cbz	r0, 8007d30 <_printf_i+0x1bc>
 8007d2c:	1b40      	subs	r0, r0, r5
 8007d2e:	6060      	str	r0, [r4, #4]
 8007d30:	6863      	ldr	r3, [r4, #4]
 8007d32:	6123      	str	r3, [r4, #16]
 8007d34:	2300      	movs	r3, #0
 8007d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d3a:	e7a7      	b.n	8007c8c <_printf_i+0x118>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	47c0      	blx	r8
 8007d46:	3001      	adds	r0, #1
 8007d48:	d0aa      	beq.n	8007ca0 <_printf_i+0x12c>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	079b      	lsls	r3, r3, #30
 8007d4e:	d413      	bmi.n	8007d78 <_printf_i+0x204>
 8007d50:	68e0      	ldr	r0, [r4, #12]
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	4298      	cmp	r0, r3
 8007d56:	bfb8      	it	lt
 8007d58:	4618      	movlt	r0, r3
 8007d5a:	e7a3      	b.n	8007ca4 <_printf_i+0x130>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	464a      	mov	r2, r9
 8007d60:	4639      	mov	r1, r7
 8007d62:	4630      	mov	r0, r6
 8007d64:	47c0      	blx	r8
 8007d66:	3001      	adds	r0, #1
 8007d68:	d09a      	beq.n	8007ca0 <_printf_i+0x12c>
 8007d6a:	3501      	adds	r5, #1
 8007d6c:	68e3      	ldr	r3, [r4, #12]
 8007d6e:	9a03      	ldr	r2, [sp, #12]
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	42ab      	cmp	r3, r5
 8007d74:	dcf2      	bgt.n	8007d5c <_printf_i+0x1e8>
 8007d76:	e7eb      	b.n	8007d50 <_printf_i+0x1dc>
 8007d78:	2500      	movs	r5, #0
 8007d7a:	f104 0919 	add.w	r9, r4, #25
 8007d7e:	e7f5      	b.n	8007d6c <_printf_i+0x1f8>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1ac      	bne.n	8007cde <_printf_i+0x16a>
 8007d84:	7803      	ldrb	r3, [r0, #0]
 8007d86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d8e:	e76c      	b.n	8007c6a <_printf_i+0xf6>
 8007d90:	08008515 	.word	0x08008515
 8007d94:	08008526 	.word	0x08008526

08007d98 <_putc_r>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b118      	cbz	r0, 8007daa <_putc_r+0x12>
 8007da2:	6983      	ldr	r3, [r0, #24]
 8007da4:	b90b      	cbnz	r3, 8007daa <_putc_r+0x12>
 8007da6:	f7ff fc4d 	bl	8007644 <__sinit>
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <_putc_r+0x60>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d112      	bne.n	8007dd6 <_putc_r+0x3e>
 8007db0:	6874      	ldr	r4, [r6, #4]
 8007db2:	68a3      	ldr	r3, [r4, #8]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	60a3      	str	r3, [r4, #8]
 8007dba:	da16      	bge.n	8007dea <_putc_r+0x52>
 8007dbc:	69a2      	ldr	r2, [r4, #24]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	db02      	blt.n	8007dc8 <_putc_r+0x30>
 8007dc2:	b2eb      	uxtb	r3, r5
 8007dc4:	2b0a      	cmp	r3, #10
 8007dc6:	d110      	bne.n	8007dea <_putc_r+0x52>
 8007dc8:	4622      	mov	r2, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4630      	mov	r0, r6
 8007dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dd2:	f000 b86b 	b.w	8007eac <__swbuf_r>
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <_putc_r+0x64>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d101      	bne.n	8007de0 <_putc_r+0x48>
 8007ddc:	68b4      	ldr	r4, [r6, #8]
 8007dde:	e7e8      	b.n	8007db2 <_putc_r+0x1a>
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <_putc_r+0x68>)
 8007de2:	429c      	cmp	r4, r3
 8007de4:	bf08      	it	eq
 8007de6:	68f4      	ldreq	r4, [r6, #12]
 8007de8:	e7e3      	b.n	8007db2 <_putc_r+0x1a>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	b2e8      	uxtb	r0, r5
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	701d      	strb	r5, [r3, #0]
 8007df4:	bd70      	pop	{r4, r5, r6, pc}
 8007df6:	bf00      	nop
 8007df8:	080084c4 	.word	0x080084c4
 8007dfc:	080084e4 	.word	0x080084e4
 8007e00:	080084a4 	.word	0x080084a4

08007e04 <_sbrk_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	2300      	movs	r3, #0
 8007e08:	4c05      	ldr	r4, [pc, #20]	; (8007e20 <_sbrk_r+0x1c>)
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	f7fe fda4 	bl	800695c <_sbrk>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_sbrk_r+0x1a>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_sbrk_r+0x1a>
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20001494 	.word	0x20001494

08007e24 <__sread>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	f000 faa2 	bl	8008374 <_read_r>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	bfab      	itete	ge
 8007e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e36:	89a3      	ldrhlt	r3, [r4, #12]
 8007e38:	181b      	addge	r3, r3, r0
 8007e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e3e:	bfac      	ite	ge
 8007e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e42:	81a3      	strhlt	r3, [r4, #12]
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <__swrite>:
 8007e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	461f      	mov	r7, r3
 8007e4c:	898b      	ldrh	r3, [r1, #12]
 8007e4e:	4605      	mov	r5, r0
 8007e50:	05db      	lsls	r3, r3, #23
 8007e52:	460c      	mov	r4, r1
 8007e54:	4616      	mov	r6, r2
 8007e56:	d505      	bpl.n	8007e64 <__swrite+0x1e>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	f000 f9b6 	bl	80081d0 <_lseek_r>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	4632      	mov	r2, r6
 8007e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e72:	463b      	mov	r3, r7
 8007e74:	4628      	mov	r0, r5
 8007e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7a:	f000 b869 	b.w	8007f50 <_write_r>

08007e7e <__sseek>:
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	460c      	mov	r4, r1
 8007e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e86:	f000 f9a3 	bl	80081d0 <_lseek_r>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	bf15      	itete	ne
 8007e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e9a:	81a3      	strheq	r3, [r4, #12]
 8007e9c:	bf18      	it	ne
 8007e9e:	81a3      	strhne	r3, [r4, #12]
 8007ea0:	bd10      	pop	{r4, pc}

08007ea2 <__sclose>:
 8007ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea6:	f000 b8d3 	b.w	8008050 <_close_r>
	...

08007eac <__swbuf_r>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	460e      	mov	r6, r1
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b118      	cbz	r0, 8007ebe <__swbuf_r+0x12>
 8007eb6:	6983      	ldr	r3, [r0, #24]
 8007eb8:	b90b      	cbnz	r3, 8007ebe <__swbuf_r+0x12>
 8007eba:	f7ff fbc3 	bl	8007644 <__sinit>
 8007ebe:	4b21      	ldr	r3, [pc, #132]	; (8007f44 <__swbuf_r+0x98>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	d12a      	bne.n	8007f1a <__swbuf_r+0x6e>
 8007ec4:	686c      	ldr	r4, [r5, #4]
 8007ec6:	69a3      	ldr	r3, [r4, #24]
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	071a      	lsls	r2, r3, #28
 8007ece:	d52e      	bpl.n	8007f2e <__swbuf_r+0x82>
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	b363      	cbz	r3, 8007f2e <__swbuf_r+0x82>
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	b2f6      	uxtb	r6, r6
 8007eda:	1ac0      	subs	r0, r0, r3
 8007edc:	6963      	ldr	r3, [r4, #20]
 8007ede:	4637      	mov	r7, r6
 8007ee0:	4283      	cmp	r3, r0
 8007ee2:	dc04      	bgt.n	8007eee <__swbuf_r+0x42>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 f948 	bl	800817c <_fflush_r>
 8007eec:	bb28      	cbnz	r0, 8007f3a <__swbuf_r+0x8e>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	60a3      	str	r3, [r4, #8]
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	701e      	strb	r6, [r3, #0]
 8007efe:	6963      	ldr	r3, [r4, #20]
 8007f00:	4283      	cmp	r3, r0
 8007f02:	d004      	beq.n	8007f0e <__swbuf_r+0x62>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	07db      	lsls	r3, r3, #31
 8007f08:	d519      	bpl.n	8007f3e <__swbuf_r+0x92>
 8007f0a:	2e0a      	cmp	r6, #10
 8007f0c:	d117      	bne.n	8007f3e <__swbuf_r+0x92>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f933 	bl	800817c <_fflush_r>
 8007f16:	b190      	cbz	r0, 8007f3e <__swbuf_r+0x92>
 8007f18:	e00f      	b.n	8007f3a <__swbuf_r+0x8e>
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <__swbuf_r+0x9c>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d101      	bne.n	8007f24 <__swbuf_r+0x78>
 8007f20:	68ac      	ldr	r4, [r5, #8]
 8007f22:	e7d0      	b.n	8007ec6 <__swbuf_r+0x1a>
 8007f24:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <__swbuf_r+0xa0>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	bf08      	it	eq
 8007f2a:	68ec      	ldreq	r4, [r5, #12]
 8007f2c:	e7cb      	b.n	8007ec6 <__swbuf_r+0x1a>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 f81f 	bl	8007f74 <__swsetup_r>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0cc      	beq.n	8007ed4 <__swbuf_r+0x28>
 8007f3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f3e:	4638      	mov	r0, r7
 8007f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f42:	bf00      	nop
 8007f44:	080084c4 	.word	0x080084c4
 8007f48:	080084e4 	.word	0x080084e4
 8007f4c:	080084a4 	.word	0x080084a4

08007f50 <_write_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4605      	mov	r5, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4c05      	ldr	r4, [pc, #20]	; (8007f70 <_write_r+0x20>)
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7fe fcaf 	bl	80068c2 <_write>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_write_r+0x1e>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_write_r+0x1e>
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20001494 	.word	0x20001494

08007f74 <__swsetup_r>:
 8007f74:	4b32      	ldr	r3, [pc, #200]	; (8008040 <__swsetup_r+0xcc>)
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	681d      	ldr	r5, [r3, #0]
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	b125      	cbz	r5, 8007f8a <__swsetup_r+0x16>
 8007f80:	69ab      	ldr	r3, [r5, #24]
 8007f82:	b913      	cbnz	r3, 8007f8a <__swsetup_r+0x16>
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fb5d 	bl	8007644 <__sinit>
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <__swsetup_r+0xd0>)
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d10f      	bne.n	8007fb0 <__swsetup_r+0x3c>
 8007f90:	686c      	ldr	r4, [r5, #4]
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	0715      	lsls	r5, r2, #28
 8007f9a:	d42c      	bmi.n	8007ff6 <__swsetup_r+0x82>
 8007f9c:	06d0      	lsls	r0, r2, #27
 8007f9e:	d411      	bmi.n	8007fc4 <__swsetup_r+0x50>
 8007fa0:	2209      	movs	r2, #9
 8007fa2:	6032      	str	r2, [r6, #0]
 8007fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fae:	e03e      	b.n	800802e <__swsetup_r+0xba>
 8007fb0:	4b25      	ldr	r3, [pc, #148]	; (8008048 <__swsetup_r+0xd4>)
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	d101      	bne.n	8007fba <__swsetup_r+0x46>
 8007fb6:	68ac      	ldr	r4, [r5, #8]
 8007fb8:	e7eb      	b.n	8007f92 <__swsetup_r+0x1e>
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <__swsetup_r+0xd8>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	bf08      	it	eq
 8007fc0:	68ec      	ldreq	r4, [r5, #12]
 8007fc2:	e7e6      	b.n	8007f92 <__swsetup_r+0x1e>
 8007fc4:	0751      	lsls	r1, r2, #29
 8007fc6:	d512      	bpl.n	8007fee <__swsetup_r+0x7a>
 8007fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fca:	b141      	cbz	r1, 8007fde <__swsetup_r+0x6a>
 8007fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	d002      	beq.n	8007fda <__swsetup_r+0x66>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 f981 	bl	80082dc <_free_r>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b94b      	cbnz	r3, 800800e <__swsetup_r+0x9a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008004:	d003      	beq.n	800800e <__swsetup_r+0x9a>
 8008006:	4621      	mov	r1, r4
 8008008:	4630      	mov	r0, r6
 800800a:	f000 f917 	bl	800823c <__smakebuf_r>
 800800e:	89a2      	ldrh	r2, [r4, #12]
 8008010:	f012 0301 	ands.w	r3, r2, #1
 8008014:	d00c      	beq.n	8008030 <__swsetup_r+0xbc>
 8008016:	2300      	movs	r3, #0
 8008018:	60a3      	str	r3, [r4, #8]
 800801a:	6963      	ldr	r3, [r4, #20]
 800801c:	425b      	negs	r3, r3
 800801e:	61a3      	str	r3, [r4, #24]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	b953      	cbnz	r3, 800803a <__swsetup_r+0xc6>
 8008024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800802c:	d1ba      	bne.n	8007fa4 <__swsetup_r+0x30>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	0792      	lsls	r2, r2, #30
 8008032:	bf58      	it	pl
 8008034:	6963      	ldrpl	r3, [r4, #20]
 8008036:	60a3      	str	r3, [r4, #8]
 8008038:	e7f2      	b.n	8008020 <__swsetup_r+0xac>
 800803a:	2000      	movs	r0, #0
 800803c:	e7f7      	b.n	800802e <__swsetup_r+0xba>
 800803e:	bf00      	nop
 8008040:	2000017c 	.word	0x2000017c
 8008044:	080084c4 	.word	0x080084c4
 8008048:	080084e4 	.word	0x080084e4
 800804c:	080084a4 	.word	0x080084a4

08008050 <_close_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	2300      	movs	r3, #0
 8008054:	4c05      	ldr	r4, [pc, #20]	; (800806c <_close_r+0x1c>)
 8008056:	4605      	mov	r5, r0
 8008058:	4608      	mov	r0, r1
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	f7fe fc4d 	bl	80068fa <_close>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_close_r+0x1a>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	b103      	cbz	r3, 800806a <_close_r+0x1a>
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	20001494 	.word	0x20001494

08008070 <__sflush_r>:
 8008070:	898a      	ldrh	r2, [r1, #12]
 8008072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	4605      	mov	r5, r0
 8008078:	0710      	lsls	r0, r2, #28
 800807a:	460c      	mov	r4, r1
 800807c:	d458      	bmi.n	8008130 <__sflush_r+0xc0>
 800807e:	684b      	ldr	r3, [r1, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc05      	bgt.n	8008090 <__sflush_r+0x20>
 8008084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	dc02      	bgt.n	8008090 <__sflush_r+0x20>
 800808a:	2000      	movs	r0, #0
 800808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008092:	2e00      	cmp	r6, #0
 8008094:	d0f9      	beq.n	800808a <__sflush_r+0x1a>
 8008096:	2300      	movs	r3, #0
 8008098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800809c:	682f      	ldr	r7, [r5, #0]
 800809e:	6a21      	ldr	r1, [r4, #32]
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	d032      	beq.n	800810a <__sflush_r+0x9a>
 80080a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	075a      	lsls	r2, r3, #29
 80080aa:	d505      	bpl.n	80080b8 <__sflush_r+0x48>
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	1ac0      	subs	r0, r0, r3
 80080b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b2:	b10b      	cbz	r3, 80080b8 <__sflush_r+0x48>
 80080b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080b6:	1ac0      	subs	r0, r0, r3
 80080b8:	2300      	movs	r3, #0
 80080ba:	4602      	mov	r2, r0
 80080bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080be:	6a21      	ldr	r1, [r4, #32]
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b0      	blx	r6
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	d106      	bne.n	80080d8 <__sflush_r+0x68>
 80080ca:	6829      	ldr	r1, [r5, #0]
 80080cc:	291d      	cmp	r1, #29
 80080ce:	d848      	bhi.n	8008162 <__sflush_r+0xf2>
 80080d0:	4a29      	ldr	r2, [pc, #164]	; (8008178 <__sflush_r+0x108>)
 80080d2:	40ca      	lsrs	r2, r1
 80080d4:	07d6      	lsls	r6, r2, #31
 80080d6:	d544      	bpl.n	8008162 <__sflush_r+0xf2>
 80080d8:	2200      	movs	r2, #0
 80080da:	6062      	str	r2, [r4, #4]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	04d9      	lsls	r1, r3, #19
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	d504      	bpl.n	80080ee <__sflush_r+0x7e>
 80080e4:	1c42      	adds	r2, r0, #1
 80080e6:	d101      	bne.n	80080ec <__sflush_r+0x7c>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b903      	cbnz	r3, 80080ee <__sflush_r+0x7e>
 80080ec:	6560      	str	r0, [r4, #84]	; 0x54
 80080ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080f0:	602f      	str	r7, [r5, #0]
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d0c9      	beq.n	800808a <__sflush_r+0x1a>
 80080f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d002      	beq.n	8008104 <__sflush_r+0x94>
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 f8ec 	bl	80082dc <_free_r>
 8008104:	2000      	movs	r0, #0
 8008106:	6360      	str	r0, [r4, #52]	; 0x34
 8008108:	e7c0      	b.n	800808c <__sflush_r+0x1c>
 800810a:	2301      	movs	r3, #1
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	1c41      	adds	r1, r0, #1
 8008112:	d1c8      	bne.n	80080a6 <__sflush_r+0x36>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0c5      	beq.n	80080a6 <__sflush_r+0x36>
 800811a:	2b1d      	cmp	r3, #29
 800811c:	d001      	beq.n	8008122 <__sflush_r+0xb2>
 800811e:	2b16      	cmp	r3, #22
 8008120:	d101      	bne.n	8008126 <__sflush_r+0xb6>
 8008122:	602f      	str	r7, [r5, #0]
 8008124:	e7b1      	b.n	800808a <__sflush_r+0x1a>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7ad      	b.n	800808c <__sflush_r+0x1c>
 8008130:	690f      	ldr	r7, [r1, #16]
 8008132:	2f00      	cmp	r7, #0
 8008134:	d0a9      	beq.n	800808a <__sflush_r+0x1a>
 8008136:	0793      	lsls	r3, r2, #30
 8008138:	bf18      	it	ne
 800813a:	2300      	movne	r3, #0
 800813c:	680e      	ldr	r6, [r1, #0]
 800813e:	bf08      	it	eq
 8008140:	694b      	ldreq	r3, [r1, #20]
 8008142:	eba6 0807 	sub.w	r8, r6, r7
 8008146:	600f      	str	r7, [r1, #0]
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	dd9c      	ble.n	800808a <__sflush_r+0x1a>
 8008150:	4643      	mov	r3, r8
 8008152:	463a      	mov	r2, r7
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	4628      	mov	r0, r5
 8008158:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800815a:	47b0      	blx	r6
 800815c:	2800      	cmp	r0, #0
 800815e:	dc06      	bgt.n	800816e <__sflush_r+0xfe>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800816c:	e78e      	b.n	800808c <__sflush_r+0x1c>
 800816e:	4407      	add	r7, r0
 8008170:	eba8 0800 	sub.w	r8, r8, r0
 8008174:	e7e9      	b.n	800814a <__sflush_r+0xda>
 8008176:	bf00      	nop
 8008178:	20400001 	.word	0x20400001

0800817c <_fflush_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b1db      	cbz	r3, 80081be <_fflush_r+0x42>
 8008186:	b118      	cbz	r0, 8008190 <_fflush_r+0x14>
 8008188:	6983      	ldr	r3, [r0, #24]
 800818a:	b90b      	cbnz	r3, 8008190 <_fflush_r+0x14>
 800818c:	f7ff fa5a 	bl	8007644 <__sinit>
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <_fflush_r+0x48>)
 8008192:	429c      	cmp	r4, r3
 8008194:	d109      	bne.n	80081aa <_fflush_r+0x2e>
 8008196:	686c      	ldr	r4, [r5, #4]
 8008198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819c:	b17b      	cbz	r3, 80081be <_fflush_r+0x42>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a6:	f7ff bf63 	b.w	8008070 <__sflush_r>
 80081aa:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <_fflush_r+0x4c>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	d101      	bne.n	80081b4 <_fflush_r+0x38>
 80081b0:	68ac      	ldr	r4, [r5, #8]
 80081b2:	e7f1      	b.n	8008198 <_fflush_r+0x1c>
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_fflush_r+0x50>)
 80081b6:	429c      	cmp	r4, r3
 80081b8:	bf08      	it	eq
 80081ba:	68ec      	ldreq	r4, [r5, #12]
 80081bc:	e7ec      	b.n	8008198 <_fflush_r+0x1c>
 80081be:	2000      	movs	r0, #0
 80081c0:	bd38      	pop	{r3, r4, r5, pc}
 80081c2:	bf00      	nop
 80081c4:	080084c4 	.word	0x080084c4
 80081c8:	080084e4 	.word	0x080084e4
 80081cc:	080084a4 	.word	0x080084a4

080081d0 <_lseek_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4605      	mov	r5, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	2200      	movs	r2, #0
 80081da:	4c05      	ldr	r4, [pc, #20]	; (80081f0 <_lseek_r+0x20>)
 80081dc:	6022      	str	r2, [r4, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7fe fbaf 	bl	8006942 <_lseek>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_lseek_r+0x1e>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_lseek_r+0x1e>
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20001494 	.word	0x20001494

080081f4 <__swhatbuf_r>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	b096      	sub	sp, #88	; 0x58
 80081fe:	2900      	cmp	r1, #0
 8008200:	4614      	mov	r4, r2
 8008202:	461d      	mov	r5, r3
 8008204:	da07      	bge.n	8008216 <__swhatbuf_r+0x22>
 8008206:	2300      	movs	r3, #0
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	89b3      	ldrh	r3, [r6, #12]
 800820c:	061a      	lsls	r2, r3, #24
 800820e:	d410      	bmi.n	8008232 <__swhatbuf_r+0x3e>
 8008210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008214:	e00e      	b.n	8008234 <__swhatbuf_r+0x40>
 8008216:	466a      	mov	r2, sp
 8008218:	f000 f8be 	bl	8008398 <_fstat_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	dbf2      	blt.n	8008206 <__swhatbuf_r+0x12>
 8008220:	9a01      	ldr	r2, [sp, #4]
 8008222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800822a:	425a      	negs	r2, r3
 800822c:	415a      	adcs	r2, r3
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	e7ee      	b.n	8008210 <__swhatbuf_r+0x1c>
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	2000      	movs	r0, #0
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	b016      	add	sp, #88	; 0x58
 800823a:	bd70      	pop	{r4, r5, r6, pc}

0800823c <__smakebuf_r>:
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008240:	079d      	lsls	r5, r3, #30
 8008242:	4606      	mov	r6, r0
 8008244:	460c      	mov	r4, r1
 8008246:	d507      	bpl.n	8008258 <__smakebuf_r+0x1c>
 8008248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	2301      	movs	r3, #1
 8008252:	6163      	str	r3, [r4, #20]
 8008254:	b002      	add	sp, #8
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	ab01      	add	r3, sp, #4
 800825a:	466a      	mov	r2, sp
 800825c:	f7ff ffca 	bl	80081f4 <__swhatbuf_r>
 8008260:	9900      	ldr	r1, [sp, #0]
 8008262:	4605      	mov	r5, r0
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff fa77 	bl	8007758 <_malloc_r>
 800826a:	b948      	cbnz	r0, 8008280 <__smakebuf_r+0x44>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	059a      	lsls	r2, r3, #22
 8008272:	d4ef      	bmi.n	8008254 <__smakebuf_r+0x18>
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	f043 0302 	orr.w	r3, r3, #2
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e7e3      	b.n	8008248 <__smakebuf_r+0xc>
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <__smakebuf_r+0x7c>)
 8008282:	62b3      	str	r3, [r6, #40]	; 0x28
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	6120      	str	r0, [r4, #16]
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	9b01      	ldr	r3, [sp, #4]
 8008296:	b15b      	cbz	r3, 80082b0 <__smakebuf_r+0x74>
 8008298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f88d 	bl	80083bc <_isatty_r>
 80082a2:	b128      	cbz	r0, 80082b0 <__smakebuf_r+0x74>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	431d      	orrs	r5, r3
 80082b4:	81a5      	strh	r5, [r4, #12]
 80082b6:	e7cd      	b.n	8008254 <__smakebuf_r+0x18>
 80082b8:	0800760d 	.word	0x0800760d

080082bc <memchr>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	b2c9      	uxtb	r1, r1
 80082c0:	4402      	add	r2, r0
 80082c2:	4290      	cmp	r0, r2
 80082c4:	4603      	mov	r3, r0
 80082c6:	d101      	bne.n	80082cc <memchr+0x10>
 80082c8:	2300      	movs	r3, #0
 80082ca:	e003      	b.n	80082d4 <memchr+0x18>
 80082cc:	781c      	ldrb	r4, [r3, #0]
 80082ce:	3001      	adds	r0, #1
 80082d0:	428c      	cmp	r4, r1
 80082d2:	d1f6      	bne.n	80082c2 <memchr+0x6>
 80082d4:	4618      	mov	r0, r3
 80082d6:	bd10      	pop	{r4, pc}

080082d8 <__malloc_lock>:
 80082d8:	4770      	bx	lr

080082da <__malloc_unlock>:
 80082da:	4770      	bx	lr

080082dc <_free_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4605      	mov	r5, r0
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d043      	beq.n	800836c <_free_r+0x90>
 80082e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e8:	1f0c      	subs	r4, r1, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfb8      	it	lt
 80082ee:	18e4      	addlt	r4, r4, r3
 80082f0:	f7ff fff2 	bl	80082d8 <__malloc_lock>
 80082f4:	4a1e      	ldr	r2, [pc, #120]	; (8008370 <_free_r+0x94>)
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	4610      	mov	r0, r2
 80082fa:	b933      	cbnz	r3, 800830a <_free_r+0x2e>
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	6014      	str	r4, [r2, #0]
 8008300:	4628      	mov	r0, r5
 8008302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008306:	f7ff bfe8 	b.w	80082da <__malloc_unlock>
 800830a:	42a3      	cmp	r3, r4
 800830c:	d90b      	bls.n	8008326 <_free_r+0x4a>
 800830e:	6821      	ldr	r1, [r4, #0]
 8008310:	1862      	adds	r2, r4, r1
 8008312:	4293      	cmp	r3, r2
 8008314:	bf01      	itttt	eq
 8008316:	681a      	ldreq	r2, [r3, #0]
 8008318:	685b      	ldreq	r3, [r3, #4]
 800831a:	1852      	addeq	r2, r2, r1
 800831c:	6022      	streq	r2, [r4, #0]
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6004      	str	r4, [r0, #0]
 8008322:	e7ed      	b.n	8008300 <_free_r+0x24>
 8008324:	4613      	mov	r3, r2
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	b10a      	cbz	r2, 800832e <_free_r+0x52>
 800832a:	42a2      	cmp	r2, r4
 800832c:	d9fa      	bls.n	8008324 <_free_r+0x48>
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	1858      	adds	r0, r3, r1
 8008332:	42a0      	cmp	r0, r4
 8008334:	d10b      	bne.n	800834e <_free_r+0x72>
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	4401      	add	r1, r0
 800833a:	1858      	adds	r0, r3, r1
 800833c:	4282      	cmp	r2, r0
 800833e:	6019      	str	r1, [r3, #0]
 8008340:	d1de      	bne.n	8008300 <_free_r+0x24>
 8008342:	6810      	ldr	r0, [r2, #0]
 8008344:	6852      	ldr	r2, [r2, #4]
 8008346:	4401      	add	r1, r0
 8008348:	6019      	str	r1, [r3, #0]
 800834a:	605a      	str	r2, [r3, #4]
 800834c:	e7d8      	b.n	8008300 <_free_r+0x24>
 800834e:	d902      	bls.n	8008356 <_free_r+0x7a>
 8008350:	230c      	movs	r3, #12
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	e7d4      	b.n	8008300 <_free_r+0x24>
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	1821      	adds	r1, r4, r0
 800835a:	428a      	cmp	r2, r1
 800835c:	bf01      	itttt	eq
 800835e:	6811      	ldreq	r1, [r2, #0]
 8008360:	6852      	ldreq	r2, [r2, #4]
 8008362:	1809      	addeq	r1, r1, r0
 8008364:	6021      	streq	r1, [r4, #0]
 8008366:	6062      	str	r2, [r4, #4]
 8008368:	605c      	str	r4, [r3, #4]
 800836a:	e7c9      	b.n	8008300 <_free_r+0x24>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	bf00      	nop
 8008370:	20000454 	.word	0x20000454

08008374 <_read_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4605      	mov	r5, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	2200      	movs	r2, #0
 800837e:	4c05      	ldr	r4, [pc, #20]	; (8008394 <_read_r+0x20>)
 8008380:	6022      	str	r2, [r4, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f7fe fa80 	bl	8006888 <_read>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_read_r+0x1e>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	b103      	cbz	r3, 8008392 <_read_r+0x1e>
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20001494 	.word	0x20001494

08008398 <_fstat_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	2300      	movs	r3, #0
 800839c:	4c06      	ldr	r4, [pc, #24]	; (80083b8 <_fstat_r+0x20>)
 800839e:	4605      	mov	r5, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	f7fe fab3 	bl	8006910 <_fstat>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d102      	bne.n	80083b4 <_fstat_r+0x1c>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	b103      	cbz	r3, 80083b4 <_fstat_r+0x1c>
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
 80083b6:	bf00      	nop
 80083b8:	20001494 	.word	0x20001494

080083bc <_isatty_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	2300      	movs	r3, #0
 80083c0:	4c05      	ldr	r4, [pc, #20]	; (80083d8 <_isatty_r+0x1c>)
 80083c2:	4605      	mov	r5, r0
 80083c4:	4608      	mov	r0, r1
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	f7fe fab1 	bl	800692e <_isatty>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_isatty_r+0x1a>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_isatty_r+0x1a>
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20001494 	.word	0x20001494

080083dc <_init>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr

080083e8 <_fini>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr
